bundle-outdated(1) -- List installed gems with newer versions available
=======================================================================

## SYNOPSIS

`bundle outdated` [GEM] [--local]
                        [--pre]
                        [--source]
                        [--strict]
                        [--parseable | --porcelain]
                        [--group=GROUP]
                        [--groups]
                        [--patch|--minor|--major]
                        [--filter-major]
                        [--filter-minor]
                        [--filter-patch]
                        [--only-explicit]

## DESCRIPTION

Outdated lists the names and versions of gems that have a newer version available
in the given source. Calling outdated with [GEM [GEM]] will only check for newer
versions of the given gems. Prerelease gems are ignored by default. If your gems
are up to date, Bundler will exit with a status of 0. Otherwise, it will exit 1.

## OPTIONS

* `--local`:
  Do not attempt to fetch gems remotely and use the gem cache instead.

* `--pre`:
  Check for newer pre-release gems.

* `--source`:
  Check against a specific source.

* `--strict`:
  Only list newer versions allowed by your Gemfile requirements, also respecting conservative update flags (--patch, --minor, --major).

* `--parseable`, `--porcelain`:
   Use minimal formatting for more parseable output.

* `--group`:
  List gems from a specific group.

* `--groups`:
  List gems organized by groups.

* `--minor`:
  Prefer updating only to next minor version.

* `--major`:
  Prefer updating to next major version (default).

* `--patch`:
  Prefer updating only to next patch version.

* `--filter-major`:
  Only list major newer versions.

* `--filter-minor`:
  Only list minor newer versions.

* `--filter-patch`:
  Only list patch newer versions.

* `--only-explicit`:
  Only list gems specified in your Gemfile, not their dependencies.

## PATCH LEVEL OPTIONS

See [bundle update(1)](bundle-update.1.html) for details.

## FILTERING OUTPUT

The 3 filtering options do not affect the resolution of versions, merely what versions are shown
in the output.

If the regular output shows the following:

    * Gem       Current  Latest  Requested  Groups
    * faker     1.6.5    1.6.6   ~> 1.4     development, test
    * hashie    1.2.0    3.4.6   = 1.2.0    default
    * headless  2.2.3    2.3.1   = 2.2.3    test

`--filter-major` would only show:

    * Gem       Current  Latest  Requested  Groups
    * hashie    1.2.0    3.4.6   = 1.2.0    default

`--filter-minor` would only show:

    * Gem       Current  Latest  Requested  Groups
    * headless  2.2.3    2.3.1   = 2.2.3    test

`--filter-patch` would only show:

    * Gem       Current  Latest  Requested  Groups
    * faker     1.6.5    1.6.6   ~> 1.4     development, test

Filter options can be combined. `--filter-minor` and `--filter-patch` would show:

    * Gem       Current  Latest  Requested  Groups
    * faker     1.6.5    1.6.6   ~> 1.4     development, test

Combining all three `filter` options would be the same result as providing none of them.
