== Case Mapping

Some string-oriented methods use case mapping.

In String:

- String#capitalize
- String#capitalize!
- String#casecmp
- String#casecmp?
- String#downcase
- String#downcase!
- String#swapcase
- String#swapcase!
- String#upcase
- String#upcase!

In Symbol:

- Symbol#capitalize
- Symbol#casecmp
- Symbol#casecmp?
- Symbol#downcase
- Symbol#swapcase
- Symbol#upcase

=== Default Case Mapping

By default, all of these methods use full Unicode case mapping,
which is suitable for most languages.

The Unicode case mapping is specified in:

- {Unicode UTR#21: Case Mappings}[https://www.unicode.org/reports/tr21/tr21-5.html]
- {Unicode Latin Case Chart}[https://www.unicode.org/charts/case].

Non-ASCII case mapping and folding are supported for UTF-8,
UTF-16BE/LE, UTF-32BE/LE, and ISO-8859-1~16 Strings/Symbols.
This support will be extended to other encodings.

Context-dependent case mapping as described in
{Table 3-17 of the Unicode standard}[https://www.unicode.org/versions/Unicode13.0.0/ch03.pdf]
is currently not supported.

In most cases, the upper and lower cases for a character are the same size.
There are exceptions (see +:fold+ below):

  s = "\u00DF" # => "ß"
  s.upcase     # => "SS"
  s = "\u0149" # => "ŉ"
  s.upcase     # => "ʼN"

Case mapping may also depend on locale (see +:turkic+ below):

  s = "\u0049"        # => "I"
  s.downcase          # => "i" # Dot above.
  s.downcase(:turkic) # => "ı" # No dot above.

Case changes may not be reversible:

  s = 'Hello World!' # => "Hello World!"
  s.downcase         # => "hello world!"
  s.downcase.upcase  # => "HELLO WORLD!" # Different from original s.

Case changing methods may not maintain Unicode normalization.
See String#unicode_normalize).

=== User-Specified Case Mapping

Except for +casecmp+ and +casecmp?+,
each of the case-mapping methods listed above
accepts optional arguments, <tt>*options</tt>.

The arguments may be:

- +:ascii+ only.
- +:fold+ only.
- +:turkic+ or +:lithuanian+ or both.

The options:

- +:ascii+:
  Letters-only mapping:
  uppercase letters ('A'..'Z') are mapped to lowercase letters ('a'..'z);
  other characters are not changed

    s = "foo \u00DF bar" # => "foo ß bar"
    s.upcase             # => "FOO SS BAR"
    s.upcase :ascii      # => "FOO ß BAR"

- +:turkic+:
  Full Unicode case mapping, adapted for
  {Turkic languages}[https://en.wikipedia.org/wiki/List_of_Turkic_languages];
  uppercase dotless +I+, for example, is mapped to lowercase dotless +i+.
  See {Unicode Turkish Alphabet}[https://unicode-table.com/en/alphabets/turkish/].

    s = 'Türkiye'       # => "Türkiye"
    s.upcase            # => "TÜRKIYE"
    s.upcase(:turkic)   # => "TÜRKİYE" # Dot above.

    s = 'TÜRKIYE'       # => "TÜRKIYE"
    s.downcase          # => "türkiye"
    s.downcase(:turkic) # => "türkıye" # No dot above.

- +:lithuanian+:
  Full Unicode case mapping,
  not yet adapted for the Lithuanian language.

    'i'.upcase                # => "I"
    'i'.upcase(:lithuanian)   # => "I"

    'İ'.downcase              # => "i̇"
    'İ'.downcase(:lithuanian) # => "i̇"

- +:fold+ (available only for String#downcase, String#downcase!,
  and Symbol#downcase):
  Unicode case folding,
  which is more far-reaching than Unicode case mapping.

    s = "\u00DF"      # => "ß"
    s.downcase        # => "ß"
    s.downcase(:fold) # => "ss"
    s.upcase          # => "SS"

    s = "\uFB04"      # => "ﬄ"
    s.downcase        # => "ﬄ"
    s.upcase          # => "FFL"
    s.downcase(:fold) # => "ffl"
