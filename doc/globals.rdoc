== Pre-Defined Global Variables

=== Exceptions

==== <tt>$!</tt>

The Exception object set by Kernel#raise.

==== <tt>$@</tt>

The same as <tt>$!.backtrace</tt>.

=== Pattern Matching

For details and examples,
see {Regexp Global Variables}[rdoc-ref:Regexp@Global+Variables].

==== <tt>$~</tt>

The information about the last match in the current scope (thread-local and frame-local).

==== <tt>$&</tt>

The string matched by the last successful match.

==== <tt>$`</tt>

The string to the left  of the last successful match.

==== <tt>$'</tt>

The string to the right of the last successful match.

==== <tt>$+</tt>

The highest group matched by the last successful match.

==== <tt>$1</tt>, <tt>$2</tt>, \Etc.

For <tt>$_n_</tt> the _nth_ group of the most recent successful match.

=== Separators

==== <tt>$/</tt>

An input record separator, initially newline.

Aliased as <tt>$-0</tt>.

==== <tt>$;</tt>

An input field separator, initially +nil+.

Aliased as <tt>$-F</tt>.

==== <tt>$\</tt>

An output record separator, initially +nil+.

==== <tt>$,</tt>

An output field separator, initially +nil+.

=== Streams

==== <tt>$stdin</tt>

The current standard input stream; initially:

  $stdin # => #<IO:<STDIN>>

==== <tt>$stdout</tt>

The current standard output stream; initially:

  $stdout # => #<IO:<STDOUT>>

==== <tt>$stderr</tt>

The current standard error stream; initially:

  $stderr # => #<IO:<STDERR>>

==== <tt>$<</tt>

Points to ARGF.

==== <tt>$></tt>

An output stream, initially <tt>$stdout</tt>.

==== <tt>$.</tt>

The input position (line number) in the most recently read stream.

==== <tt>$_</tt>

The line (string) from the most recently read stream.

=== Processes

==== <tt>$0</tt>

Initially, contains the name of the script being executed;
may be reassigned.

==== <tt>$*</tt>

Points to ARGV.

==== <tt>$$</tt>

The process ID of the current process. Same as Process.pid.

==== <tt>$?</tt>

Initially +nil+, otherwise the Process::Status object
creatd for the most-recently exited child process;
thread-local.

==== <tt>$LOAD_PATH</tt>

Contains the array of paths to be searched
by Kernel#load and Kernel#require.

Singleton method <tt>$LOAD_PATH.resolve_feature_path(feature)</tt>
returns:

- <tt>+:rb+, _path_], where +path+ is the path to the Ruby file
  to be loaded for the given +feature+.
- <tt>+:so+, _path_], where +path+ is the path to the shared object file
  to be loaded for the given +feature+.
- +nil+ if there is no such +feature+ and +path+.

Examples:

  $LOAD_PATH.resolve_feature_path('timeout')
  # => [:rb, "/snap/ruby/317/lib/ruby/3.2.0/timeout.rb"]
  $LOAD_PATH.resolve_feature_path('date_core')
  # => [:so, "/snap/ruby/317/lib/ruby/3.2.0/x86_64-linux/date_core.so"]
  $LOAD_PATH.resolve_feature_path('foo')
  # => nil

Aliased as <tt>$:</tt> and <tt>$-I</tt>.

==== <tt>$LOADED_FEATURES</tt>

Contains an array of the paths to the loaded files:

  $LOADED_FEATURES.take(10)
  # =>
  ["enumerator.so",
   "thread.rb",
   "fiber.so",
   "rational.so",
   "complex.so",
   "ruby2_keywords.rb",
   "/snap/ruby/317/lib/ruby/3.2.0/x86_64-linux/enc/encdb.so",
   "/snap/ruby/317/lib/ruby/3.2.0/x86_64-linux/enc/trans/transdb.so",
   "/snap/ruby/317/lib/ruby/3.2.0/x86_64-linux/rbconfig.rb",
   "/snap/ruby/317/lib/ruby/3.2.0/rubygems/compatibility.rb"]

Aliased as <tt>$"</tt>.

=== Debugging

==== <tt>$FILENAME</tt>

The value returned by method ARGF.filename.

==== <tt>$DEBUG</tt>

Initially +true+ if command-line option <tt>-d</tt> or <tt>--debug</tt> is given,
otherwise initially +false+;
may be set to either value in the running program.

When +true+, prints each raised exception to <tt>$stderr</tt>.

Aliased as <tt>$-d</tt>.

==== <tt>$VERBOSE</tt>

Initially +true+ if command-line option <tt>-v</tt> or <tt>-w</tt> is given,
otherwise initially +false+;
may be set to either value, or to +nil+, in the running program.

When +true+, enables Ruby warnings.

When +nil+, disables warnings, including those from Kernel#warn.

Aliased as <tt>$-v</tt> and <tt>$-w</tt>.

==== <tt>$-a</tt>

Whether command-line option <tt>-a</tt> was given; read-only.

==== <tt>$-i</tt>

Contains the extension given with command-line option <tt>-i</tt>,
or +nil+ if none.

==== <tt>$-l</tt>

Whether command-line option <tt>-l</tt> was set; read-only.

==== <tt>$-p</tt>

Whether command-line option <tt>-p</tt> was given; read-only.

=== Deprecated

==== <tt>$=</tt>

This variable is no longer effective.

== Pre-Defined Global Constants

== Streams

==== <tt>STDIN</tt>

The standard input stream; the default value for <tt>$stdin</tt>.

==== <tt>STDOUT</tt>

The standard output stream; The default value for <tt>$stdout</tt>.

==== <tt>STDERR</tt>

The standard error stream; the default value for <tt>$stderr</tt>.

=== Enviroment

==== <tt>ENV</tt>

A hash of the contains current environment variables names and values.

==== <tt>ARGF</tt>

The virtual concatenation of the files given on the command line,
or from <tt>$stdin</tt> if no files were given.

==== <tt>ARGV</tt>

An array of the given command-line.

==== <tt>DATA</tt>

Defined if and only if the program has this line:

  __END__

When defined, <tt>DATA</tt> is a File object
containing the lines following the <tt>__END__</tt>,
positioned at the first of those lines:

  p DATA
  DATA.each_line { |line| p line }
  __END__
  Foo
  Bar
  Baz

Output:

  #<File:t.rb>
  "Foo\n"
  "Bar\n"
  "Baz\n"

==== <tt>TOPLEVEL_BINDING</tt>

The Binding of the top level scope.


==== <tt>RUBY_VERSION</tt>

   The Ruby language version.

==== <tt>RUBY_RELEASE_DATE</tt>

The release date string.

==== <tt>RUBY_PLATFORM</tt>

  The platform identifier.

==== <tt>RUBY_PATCHLEVEL</tt>

The patch level for this Ruby.
For a development build the patch level will be -1.

==== <tt>RUBY_REVISION</tt>

The git commit hash for this Ruby.

==== <tt>RUBY_COPYRIGHT</tt>

The copyright string for Ruby.

==== <tt>RUBY_ENGINE</tt>

The name of the Ruby implementation.

==== <tt>RUBY_ENGINE_VERSION</tt>

The version of the Ruby implementation.

==== <tt>RUBY_DESCRIPTION</tt>

The description of the Ruby implementation.
