Returns a 3-element array of substrings of +self+.

Converts +pattern+ to a Regexp, if it is not already one.
Matches +pattern+ against +self+, scanning from the beginning.

If the pattern is matched, returns the array:

  [pre_match, first_match, post_match]

where:

- +first_match+ is the first-found matching substring.
- +pre_match+ and +post_match+ are the preceding and following substrings.

Examples:

  'hello'.partition('l')      # => ["he", "l", "lo"]
  'hello'.partition('ll')     # => ["he", "ll", "o"]
  'hello'.partition('h')      # => ["", "h", "ello"]
  'hello'.partition('o')      # => ["hell", "o", ""]
  'hello'.partition(/l+/)     #=> ["he", "ll", "o"]
  'hello'.partition('')       # => ["", "", "hello"]  # Note: this post_match is a copy of self.
  'тест'.partition('т')       # => ["", "т", "ест"]
  'こんにちは'.partition('に')  # => ["こん", "に", "ちは"]

Does _not_ set {pattern-matching global variables}[rdoc-ref:globals.md@Pattern+Matching].

If the pattern is not matched, returns a copy of +self+ and two empty strings:

  'hello'.partition('x') # => ["hello", "", ""]

Related: see {Converting to Non-String}[rdoc-ref:String@Converting+to+Non--5CString].
