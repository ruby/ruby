/******************************************************************************/
/* This file is generated by the bin/template script and should not be        */
/* modified manually.                                                         */
/******************************************************************************/

#ifndef YARP_NODE_H
#define YARP_NODE_H

#include "yarp.h"

// Initialize a yp_token_list_t with its default values.
void
yp_token_list_init(yp_token_list_t *token_list);

// Append a token to the given list.
void
yp_token_list_append(yp_token_list_t *token_list, const yp_token_t *token);

// Checks if the current token list includes the given token.
bool
yp_token_list_includes(yp_token_list_t *token_list, const yp_token_t *token);

// Initiailize a list of nodes.
void
yp_node_list_init(yp_node_list_t *node_list);

// Append a new node onto the end of the node list.
void
yp_node_list_append(yp_parser_t *parser, yp_node_t *parent, yp_node_list_t *list, yp_node_t *node);

// Allocate a new AliasNode node.
yp_node_t *
yp_node_alias_node_create(yp_parser_t *parser, yp_node_t *new_name, yp_node_t *old_name, const yp_location_t *keyword_loc, yp_location_t *location);

// Allocate a new AndNode node.
yp_node_t *
yp_node_and_node_create(yp_parser_t *parser, yp_node_t *left, yp_node_t *right, const yp_token_t *operator, yp_location_t *location);

// Allocate a new ArgumentsNode node.
yp_node_t *
yp_node_arguments_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new ArrayNode node.
yp_node_t *
yp_node_array_node_create(yp_parser_t *parser, const yp_token_t *opening, const yp_token_t *closing, yp_location_t *location);

// Allocate a new AssocNode node.
yp_node_t *
yp_node_assoc_node_create(yp_parser_t *parser, yp_node_t *key, yp_node_t *value, const yp_token_t *operator, yp_location_t *location);

// Allocate a new AssocSplatNode node.
yp_node_t *
yp_node_assoc_splat_node_create(yp_parser_t *parser, yp_node_t *value, const yp_location_t *operator_loc, yp_location_t *location);

// Allocate a new BeginNode node.
yp_node_t *
yp_node_begin_node_create(yp_parser_t *parser, const yp_token_t *begin_keyword, yp_node_t *statements, yp_node_t *rescue_clause, yp_node_t *else_clause, yp_node_t *ensure_clause, const yp_token_t *end_keyword, yp_location_t *location);

// Allocate a new BlockArgumentNode node.
yp_node_t *
yp_node_block_argument_node_create(yp_parser_t *parser, yp_node_t *expression, const yp_location_t *operator_loc, yp_location_t *location);

// Allocate a new BlockNode node.
yp_node_t *
yp_node_block_node_create(yp_parser_t *parser, yp_node_t *scope, yp_node_t *parameters, yp_node_t *statements, const yp_location_t *opening_loc, const yp_location_t *closing_loc, yp_location_t *location);

// Allocate a new BlockParameterNode node.
yp_node_t *
yp_node_block_parameter_node_create(yp_parser_t *parser, const yp_token_t *name, const yp_location_t *operator_loc, yp_location_t *location);

// Allocate a new BlockParametersNode node.
yp_node_t *
yp_node_block_parameters_node_create(yp_parser_t *parser, yp_node_t *parameters, yp_location_t *location);

// Allocate a new BreakNode node.
yp_node_t *
yp_node_break_node_create(yp_parser_t *parser, yp_node_t *arguments, const yp_location_t *keyword_loc, yp_location_t *location);

// Allocate a new CallNode node.
yp_node_t *
yp_node_call_node_create(yp_parser_t *parser, yp_node_t *receiver, const yp_token_t *call_operator, const yp_token_t *message, const yp_token_t *opening, yp_node_t *arguments, const yp_token_t *closing, yp_node_t *block, yp_location_t *location);

// Allocate a new CaseNode node.
yp_node_t *
yp_node_case_node_create(yp_parser_t *parser, yp_node_t *predicate, yp_node_t *consequent, const yp_location_t *case_keyword_loc, const yp_location_t *end_keyword_loc, yp_location_t *location);

// Allocate a new ClassNode node.
yp_node_t *
yp_node_class_node_create(yp_parser_t *parser, yp_node_t *scope, const yp_token_t *class_keyword, yp_node_t *constant_path, const yp_token_t *inheritance_operator, yp_node_t *superclass, yp_node_t *statements, const yp_token_t *end_keyword);

// Allocate a new ClassVariableReadNode node.
yp_node_t *
yp_node_class_variable_read_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new ClassVariableWriteNode node.
yp_node_t *
yp_node_class_variable_write_node_create(yp_parser_t *parser, const yp_location_t *name_loc, yp_node_t *value, const yp_location_t *operator_loc, yp_location_t *location);

// Allocate a new ConstantPathNode node.
yp_node_t *
yp_node_constant_path_node_create(yp_parser_t *parser, yp_node_t *parent, const yp_token_t *delimiter, yp_node_t *child);

// Allocate a new ConstantPathWriteNode node.
yp_node_t *
yp_node_constant_path_write_node_create(yp_parser_t *parser, yp_node_t *target, const yp_token_t *operator, yp_node_t *value);

// Allocate a new ConstantReadNode node.
yp_node_t *
yp_node_constant_read_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new DefNode node.
yp_node_t *
yp_node_def_node_create(yp_parser_t *parser, const yp_token_t *name, yp_node_t *receiver, yp_node_t *parameters, yp_node_t *statements, yp_node_t *scope, const yp_location_t *def_keyword_loc, const yp_location_t *operator_loc, const yp_location_t *lparen_loc, const yp_location_t *rparen_loc, const yp_location_t *equal_loc, const yp_location_t *end_keyword_loc, yp_location_t *location);

// Allocate a new DefinedNode node.
yp_node_t *
yp_node_defined_node_create(yp_parser_t *parser, const yp_token_t *lparen, yp_node_t *value, const yp_token_t *rparen, const yp_location_t *keyword_loc);

// Allocate a new ElseNode node.
yp_node_t *
yp_node_else_node_create(yp_parser_t *parser, const yp_token_t *else_keyword, yp_node_t *statements, const yp_token_t *end_keyword);

// Allocate a new EnsureNode node.
yp_node_t *
yp_node_ensure_node_create(yp_parser_t *parser, const yp_token_t *ensure_keyword, yp_node_t *statements, const yp_token_t *end_keyword);

// Allocate a new FalseNode node.
yp_node_t *
yp_node_false_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new FloatNode node.
yp_node_t *
yp_node_float_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new ForNode node.
yp_node_t *
yp_node_for_node_create(yp_parser_t *parser, yp_node_t *index, yp_node_t *collection, yp_node_t *statements, const yp_location_t *for_keyword_loc, const yp_location_t *in_keyword_loc, const yp_location_t *do_keyword_loc, const yp_location_t *end_keyword_loc, yp_location_t *location);

// Allocate a new ForwardingArgumentsNode node.
yp_node_t *
yp_node_forwarding_arguments_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new ForwardingParameterNode node.
yp_node_t *
yp_node_forwarding_parameter_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new ForwardingSuperNode node.
yp_node_t *
yp_node_forwarding_super_node_create(yp_parser_t *parser, yp_node_t *block, yp_location_t *location);

// Allocate a new GlobalVariableReadNode node.
yp_node_t *
yp_node_global_variable_read_node_create(yp_parser_t *parser, const yp_token_t *name);

// Allocate a new GlobalVariableWriteNode node.
yp_node_t *
yp_node_global_variable_write_node_create(yp_parser_t *parser, const yp_token_t *name, const yp_token_t *operator, yp_node_t *value);

// Allocate a new HashNode node.
yp_node_t *
yp_node_hash_node_create(yp_parser_t *parser, const yp_token_t *opening, const yp_token_t *closing);

// Allocate a new HeredocNode node.
yp_node_t *
yp_node_heredoc_node_create(yp_parser_t *parser, const yp_token_t *opening, const yp_token_t *closing, int dedent);

// Allocate a new IfNode node.
yp_node_t *
yp_node_if_node_create(yp_parser_t *parser, const yp_token_t *if_keyword, yp_node_t *predicate, yp_node_t *statements, yp_node_t *consequent, const yp_token_t *end_keyword);

// Allocate a new ImaginaryNode node.
yp_node_t *
yp_node_imaginary_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new InstanceVariableReadNode node.
yp_node_t *
yp_node_instance_variable_read_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new InstanceVariableWriteNode node.
yp_node_t *
yp_node_instance_variable_write_node_create(yp_parser_t *parser, const yp_location_t *name_loc, yp_node_t *value, const yp_location_t *operator_loc, yp_location_t *location);

// Allocate a new IntegerNode node.
yp_node_t *
yp_node_integer_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new InterpolatedRegularExpressionNode node.
yp_node_t *
yp_node_interpolated_regular_expression_node_create(yp_parser_t *parser, const yp_token_t *opening, const yp_token_t *closing);

// Allocate a new InterpolatedStringNode node.
yp_node_t *
yp_node_interpolated_string_node_create(yp_parser_t *parser, const yp_token_t *opening, const yp_token_t *closing);

// Allocate a new InterpolatedSymbolNode node.
yp_node_t *
yp_node_interpolated_symbol_node_create(yp_parser_t *parser, const yp_token_t *opening, const yp_token_t *closing);

// Allocate a new InterpolatedXStringNode node.
yp_node_t *
yp_node_interpolated_x_string_node_create(yp_parser_t *parser, const yp_token_t *opening, const yp_token_t *closing);

// Allocate a new KeywordParameterNode node.
yp_node_t *
yp_node_keyword_parameter_node_create(yp_parser_t *parser, const yp_token_t *name, yp_node_t *value);

// Allocate a new KeywordRestParameterNode node.
yp_node_t *
yp_node_keyword_rest_parameter_node_create(yp_parser_t *parser, const yp_token_t *operator, const yp_token_t *name);

// Allocate a new KeywordStarNode node.
yp_node_t *
yp_node_keyword_star_node_create(yp_parser_t *parser, const yp_token_t *operator, yp_node_t *expression);

// Allocate a new LambdaNode node.
yp_node_t *
yp_node_lambda_node_create(yp_parser_t *parser, yp_node_t *scope, const yp_token_t *lparen, yp_node_t *parameters, const yp_token_t *rparen, yp_node_t *statements);

// Allocate a new LocalVariableReadNode node.
yp_node_t *
yp_node_local_variable_read_node_create(yp_parser_t *parser, const yp_token_t *name, int depth);

// Allocate a new LocalVariableWriteNode node.
yp_node_t *
yp_node_local_variable_write_node_create(yp_parser_t *parser, const yp_token_t *name, const yp_token_t *operator, yp_node_t *value, int depth);

// Allocate a new MissingNode node.
yp_node_t *
yp_node_missing_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new ModuleNode node.
yp_node_t *
yp_node_module_node_create(yp_parser_t *parser, yp_node_t *scope, const yp_token_t *module_keyword, yp_node_t *constant_path, yp_node_t *statements, const yp_token_t *end_keyword);

// Allocate a new MultiWriteNode node.
yp_node_t *
yp_node_multi_write_node_create(yp_parser_t *parser, const yp_token_t *operator, yp_node_t *value, const yp_location_t *lparen_loc, const yp_location_t *rparen_loc);

// Allocate a new NextNode node.
yp_node_t *
yp_node_next_node_create(yp_parser_t *parser, yp_node_t *arguments, const yp_location_t *keyword_loc, yp_location_t *location);

// Allocate a new NilNode node.
yp_node_t *
yp_node_nil_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new NoKeywordsParameterNode node.
yp_node_t *
yp_node_no_keywords_parameter_node_create(yp_parser_t *parser, const yp_location_t *operator_loc, const yp_location_t *keyword_loc, yp_location_t *location);

// Allocate a new OperatorAndAssignmentNode node.
yp_node_t *
yp_node_operator_and_assignment_node_create(yp_parser_t *parser, yp_node_t *target, yp_node_t *value, const yp_location_t *operator_loc, yp_location_t *location);

// Allocate a new OperatorAssignmentNode node.
yp_node_t *
yp_node_operator_assignment_node_create(yp_parser_t *parser, yp_node_t *target, const yp_token_t *operator, yp_node_t *value);

// Allocate a new OperatorOrAssignmentNode node.
yp_node_t *
yp_node_operator_or_assignment_node_create(yp_parser_t *parser, yp_node_t *target, yp_node_t *value, const yp_location_t *operator_loc, yp_location_t *location);

// Allocate a new OptionalParameterNode node.
yp_node_t *
yp_node_optional_parameter_node_create(yp_parser_t *parser, const yp_token_t *name, const yp_token_t *equal_operator, yp_node_t *value);

// Allocate a new OrNode node.
yp_node_t *
yp_node_or_node_create(yp_parser_t *parser, yp_node_t *left, yp_node_t *right, const yp_location_t *operator_loc, yp_location_t *location);

// Allocate a new ParametersNode node.
yp_node_t *
yp_node_parameters_node_create(yp_parser_t *parser, yp_node_t *rest, yp_node_t *keyword_rest, yp_node_t *block);

// Allocate a new ParenthesesNode node.
yp_node_t *
yp_node_parentheses_node_create(yp_parser_t *parser, yp_node_t *statements, const yp_location_t *opening_loc, const yp_location_t *closing_loc, yp_location_t *location);

// Allocate a new PostExecutionNode node.
yp_node_t *
yp_node_post_execution_node_create(yp_parser_t *parser, yp_node_t *statements, const yp_location_t *keyword_loc, const yp_location_t *opening_loc, const yp_location_t *closing_loc, yp_location_t *location);

// Allocate a new PreExecutionNode node.
yp_node_t *
yp_node_pre_execution_node_create(yp_parser_t *parser, yp_node_t *statements, const yp_location_t *keyword_loc, const yp_location_t *opening_loc, const yp_location_t *closing_loc, yp_location_t *location);

// Allocate a new ProgramNode node.
yp_node_t *
yp_node_program_node_create(yp_parser_t *parser, yp_node_t *scope, yp_node_t *statements);

// Allocate a new RangeNode node.
yp_node_t *
yp_node_range_node_create(yp_parser_t *parser, yp_node_t *left, yp_node_t *right, const yp_location_t *operator_loc, yp_location_t *location);

// Allocate a new RationalNode node.
yp_node_t *
yp_node_rational_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new RedoNode node.
yp_node_t *
yp_node_redo_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new RegularExpressionNode node.
yp_node_t *
yp_node_regular_expression_node_create(yp_parser_t *parser, const yp_token_t *opening, const yp_token_t *content, const yp_token_t *closing);

// Allocate a new RequiredDestructuredParameterNode node.
yp_node_t *
yp_node_required_destructured_parameter_node_create(yp_parser_t *parser, const yp_token_t *opening, const yp_token_t *closing);

// Allocate a new RequiredParameterNode node.
yp_node_t *
yp_node_required_parameter_node_create(yp_parser_t *parser, const yp_token_t *name);

// Allocate a new RescueModifierNode node.
yp_node_t *
yp_node_rescue_modifier_node_create(yp_parser_t *parser, yp_node_t *expression, const yp_token_t *rescue_keyword, yp_node_t *rescue_expression);

// Allocate a new RescueNode node.
yp_node_t *
yp_node_rescue_node_create(yp_parser_t *parser, const yp_token_t *rescue_keyword, const yp_token_t *equal_greater, yp_node_t *exception, yp_node_t *statements, yp_node_t *consequent);

// Allocate a new RestParameterNode node.
yp_node_t *
yp_node_rest_parameter_node_create(yp_parser_t *parser, const yp_token_t *operator, const yp_token_t *name);

// Allocate a new RetryNode node.
yp_node_t *
yp_node_retry_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new ReturnNode node.
yp_node_t *
yp_node_return_node_create(yp_parser_t *parser, const yp_token_t *keyword, yp_node_t *arguments);

// Allocate a new Scope node.
yp_node_t *
yp_node_scope_create(yp_parser_t *parser);

// Allocate a new SelfNode node.
yp_node_t *
yp_node_self_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new SingletonClassNode node.
yp_node_t *
yp_node_singleton_class_node_create(yp_parser_t *parser, yp_node_t *scope, const yp_token_t *class_keyword, const yp_token_t *operator, yp_node_t *expression, yp_node_t *statements, const yp_token_t *end_keyword);

// Allocate a new SourceEncodingNode node.
yp_node_t *
yp_node_source_encoding_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new SourceFileNode node.
yp_node_t *
yp_node_source_file_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new SourceLineNode node.
yp_node_t *
yp_node_source_line_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new SplatNode node.
yp_node_t *
yp_node_splat_node_create(yp_parser_t *parser, const yp_token_t *operator, yp_node_t *expression);

// Allocate a new StatementsNode node.
yp_node_t *
yp_node_statements_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new StringConcatNode node.
yp_node_t *
yp_node_string_concat_node_create(yp_parser_t *parser, yp_node_t *left, yp_node_t *right);

// Allocate a new StringInterpolatedNode node.
yp_node_t *
yp_node_string_interpolated_node_create(yp_parser_t *parser, const yp_token_t *opening, yp_node_t *statements, const yp_token_t *closing);

// Allocate a new StringNode node.
yp_node_t *
yp_node_string_node_create(yp_parser_t *parser, const yp_token_t *opening, const yp_token_t *content, const yp_token_t *closing);

// Allocate a new SuperNode node.
yp_node_t *
yp_node_super_node_create(yp_parser_t *parser, const yp_token_t *keyword, const yp_token_t *lparen, yp_node_t *arguments, const yp_token_t *rparen, yp_node_t *block);

// Allocate a new SymbolNode node.
yp_node_t *
yp_node_symbol_node_create(yp_parser_t *parser, const yp_token_t *opening, const yp_token_t *value, const yp_token_t *closing);

// Allocate a new TernaryNode node.
yp_node_t *
yp_node_ternary_node_create(yp_parser_t *parser, yp_node_t *predicate, const yp_token_t *question_mark, yp_node_t *true_expression, const yp_token_t *colon, yp_node_t *false_expression);

// Allocate a new TrueNode node.
yp_node_t *
yp_node_true_node_create(yp_parser_t *parser, yp_location_t *location);

// Allocate a new UndefNode node.
yp_node_t *
yp_node_undef_node_create(yp_parser_t *parser, const yp_location_t *keyword_loc, yp_location_t *location);

// Allocate a new UnlessNode node.
yp_node_t *
yp_node_unless_node_create(yp_parser_t *parser, const yp_token_t *keyword, yp_node_t *predicate, yp_node_t *statements, yp_node_t *consequent, const yp_token_t *end_keyword);

// Allocate a new UntilNode node.
yp_node_t *
yp_node_until_node_create(yp_parser_t *parser, const yp_token_t *keyword, yp_node_t *predicate, yp_node_t *statements);

// Allocate a new WhenNode node.
yp_node_t *
yp_node_when_node_create(yp_parser_t *parser, const yp_token_t *when_keyword, yp_node_t *statements);

// Allocate a new WhileNode node.
yp_node_t *
yp_node_while_node_create(yp_parser_t *parser, const yp_token_t *keyword, yp_node_t *predicate, yp_node_t *statements);

// Allocate a new XStringNode node.
yp_node_t *
yp_node_x_string_node_create(yp_parser_t *parser, const yp_token_t *opening, const yp_token_t *content, const yp_token_t *closing, yp_location_t *location);

// Allocate a new YieldNode node.
yp_node_t *
yp_node_yield_node_create(yp_parser_t *parser, const yp_token_t *keyword, const yp_token_t *lparen, yp_node_t *arguments, const yp_token_t *rparen);


#endif // YARP_NODE_H
