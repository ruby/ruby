name: MinGW
on: [push, pull_request]

# Notes:
# Actions console encoding causes issues, see test-all & test-spec steps
#
jobs:
  make:
    runs-on: windows-2019
    env:
      MSYSTEM: MINGW64
      MSYSTEM_PREFIX: /mingw64
      MSYS2_ARCH: x86_64
      CHOST: "x86_64-w64-mingw32"
      CFLAGS:   "-march=x86-64 -mtune=generic -O3 -pipe -fstack-protector-strong"
      CXXFLAGS: "-march=x86-64 -mtune=generic -O3 -pipe"
      CPPFLAGS: "-D_FORTIFY_SOURCE=2 -D__USE_MINGW_ANSI_STDIO=1 -DFD_SETSIZE=2048"
      LDFLAGS:  "-pipe -fstack-protector-strong"
      UPDATE_UNICODE: "UNICODE_FILES=. UNICODE_PROPERTY_FILES=. UNICODE_AUXILIARY_FILES=. UNICODE_EMOJI_FILES=."
      GITPULLOPTIONS: --no-tags origin ${{github.ref}}
    strategy:
      matrix:
        test_task: [ "check" ] # to make job names consistent
      fail-fast: false
    steps:
      - run: mkdir build
        working-directory:
      - name: git config
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead 0
          git config --global init.defaultBranch garbage
      - uses: actions/checkout@v2
        with:
          path: src
      - name: Set up Ruby & MSYS2
        uses: MSP-Greg/setup-ruby-pkgs@v1
        with:
          ruby-version: 2.6
          mingw: _upgrade_ gdbm gmp libffi libyaml openssl ragel readline
          msys2: automake1.16 bison
      - name: where check
        run: |
          # show where
          Write-Host
          $where = 'gcc.exe', 'ragel.exe', 'make.exe', 'bison.exe', 'libcrypto-1_1-x64.dll', 'libssl-1_1-x64.dll'
          foreach ($e in $where) {
            $rslt = where.exe $e 2>&1 | Out-String
            if ($rslt.contains($e)) { Write-Host $rslt }
            else { Write-Host "`nCan't find $e" }
          }
      - name: misc setup, autoreconf
        run: |
          mkdir install
          mkdir temp
          cd src
          sh -c "autoreconf -fi"
        working-directory:

      - name: configure
        run: |
          # Actions uses UTF8, causes test failures, similar to normal OS setup
          $PSDefaultParameterValues['*:Encoding'] = 'utf8'
          [Console]::OutputEncoding = [System.Text.Encoding]::GetEncoding("IBM437")
          [Console]::InputEncoding  = [System.Text.Encoding]::GetEncoding("IBM437")
          $config_args = "--build=$env:CHOST --host=$env:CHOST --target=$env:CHOST"
          Write-Host $config_args
          sh -c "../src/configure --disable-install-doc --prefix=/install $config_args"
          # Write-Host "-------------------------------------- config.log"
          # Get-Content ./config.log | foreach {Write-Output $_}

      - name: update
        run: |
          $jobs = [int](2 * $env:NUMBER_OF_PROCESSORS)
          make -j $jobs incs

      - name: download gems
        run: |
          $jobs = [int](2 * $env:NUMBER_OF_PROCESSORS)
          make -j $jobs update-gems

      - name: make all
        timeout-minutes: 40
        run: |
          $jobs = [int](2 * $env:NUMBER_OF_PROCESSORS)
          make -j $jobs

      - run: make leaked-globals

      - name: make install
        run: |
          # Actions uses UTF8, causes test failures, similar to normal OS setup
          $PSDefaultParameterValues['*:Encoding'] = 'utf8'
          [Console]::OutputEncoding = [System.Text.Encoding]::GetEncoding("IBM437")
          [Console]::InputEncoding  = [System.Text.Encoding]::GetEncoding("IBM437")
          make DESTDIR=.. install-nodoc

      - name: test
        timeout-minutes: 5
        run: |
          make test

      - name: test-all
        timeout-minutes: 60
        run: |
          # Actions uses UTF8, causes test failures, similar to normal OS setup
          $PSDefaultParameterValues['*:Encoding'] = 'utf8'
          [Console]::OutputEncoding = [System.Text.Encoding]::GetEncoding("IBM437")
          [Console]::InputEncoding  = [System.Text.Encoding]::GetEncoding("IBM437")
          $jobs = [int](1.5 * $env:NUMBER_OF_PROCESSORS)
          if ($env:BUNDLER_VERSION) { Remove-Item env:\BUNDLER_VERSION }
          make test-all TESTOPTS="-j $jobs --retry --job-status=normal --show-skip --timeout-scale=1.5"

      - name: test-spec
        timeout-minutes: 10
        working-directory: src/spec/ruby
        run: |
          $env:Path = "$pwd/../../../install/bin;$env:Path"
          # Actions uses UTF8, causes test failures, similar to normal OS setup
          $PSDefaultParameterValues['*:Encoding'] = 'utf8'
          [Console]::OutputEncoding = [System.Text.Encoding]::GetEncoding("IBM437")
          [Console]::InputEncoding  = [System.Text.Encoding]::GetEncoding("IBM437")
          ruby -v
          ruby ../mspec/bin/mspec -I../../tool/lib -j --timeout 60

      - uses: k0kubun/action-slack@v2.0.0
        with:
          payload: |
            {
              "ci": "GitHub Actions",
              "env": "${{ github.workflow }} / ${{ matrix.test_task }}",
              "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref }}".split('/').reverse()[0]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SIMPLER_ALERTS_URL }} # ruby-lang slack: ruby/simpler-alerts-bot
        if: failure() && github.event_name == 'push'

defaults:
  run:
    working-directory: build
