name: MinGW
on:
  push:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '**.rdoc'
  pull_request:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '**.rdoc'

concurrency:
  group: ${{ github.workflow }} / ${{ startsWith(github.event_name, 'pull') && github.ref_name || github.sha }}
  cancel-in-progress: ${{ startsWith(github.event_name, 'pull') }}

# Notes:
# Actions console encoding causes issues, see test-all & test-spec steps
#
jobs:
  make:
    runs-on: windows-2022
    name: ${{ github.workflow }} (${{ matrix.msystem }})
    env:
      MSYSTEM: ${{ matrix.msystem }}
      MSYS2_ARCH: x86_64
      CHOST: "x86_64-w64-mingw32"
      CFLAGS:   "-march=x86-64 -mtune=generic -O3 -pipe -fstack-protector-strong"
      CXXFLAGS: "-march=x86-64 -mtune=generic -O3 -pipe"
      CPPFLAGS: "-D_FORTIFY_SOURCE=2 -D__USE_MINGW_ANSI_STDIO=1 -DFD_SETSIZE=2048"
      LDFLAGS:  "-pipe -fstack-protector-strong"
      UPDATE_UNICODE: "UNICODE_FILES=. UNICODE_PROPERTY_FILES=. UNICODE_AUXILIARY_FILES=. UNICODE_EMOJI_FILES=."
      GITPULLOPTIONS: --no-tags origin ${{github.ref}}
    strategy:
      matrix:
        include:
          - msystem: "MINGW64"
            base_ruby: 2.6
            test_task: "check" # to make job names consistent
          - msystem: "UCRT64"
            base_ruby: head
            test_task: "check" # to make job names consistent
      fail-fast: false
    if: ${{ !startsWith(github.event.head_commit.message, '[DOC]') && !contains(github.event.pull_request.labels.*.name, 'Documentation') }}
    steps:
      - run: mkdir build
        working-directory:
      - name: git config
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead 0
          git config --global init.defaultBranch garbage
      - uses: actions/checkout@v2
        with:
          path: src
      - uses: actions/cache@v3
        with:
          path: src/.downloaded-cache
          key: downloaded-cache
      - name: Set up Ruby & MSYS2
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.base_ruby }}
      - name: set env
        run: |
          echo "GNUMAKEFLAGS=-j$((2 * NUMBER_OF_PROCESSORS))" >> $GITHUB_ENV
          echo "TEST_JOBS=$((15 * NUMBER_OF_PROCESSORS / 10))" >> $GITHUB_ENV

      - name: where check
        run: |
          # show where
          mv /c/Windows/System32/libcrypto-1_1-x64.dll /c/Windows/System32/libcrypto-1_1-x64.dll_
          mv /c/Windows/System32/libssl-1_1-x64.dll    /c/Windows/System32/libssl-1_1-x64.dll_
          result=true
          for e in gcc.exe ragel.exe make.exe bison.exe libcrypto-1_1-x64.dll libssl-1_1-x64.dll; do
            echo '##['group']'$'\033[93m'$e$'\033[m'
            where $e || result=false
            echo '##['endgroup']'
          done
          $result

      - name: version check
        run: |
          # show version
          result=true
          for e in gcc ragel make bison "openssl version"; do
            case "$e" in *" "*) ;; *) e="$e --version";; esac
            echo '##['group']'$'\033[93m'$e$'\033[m'
            $e || result=false
            echo '##['endgroup']'
          done
          $result

      - name: autogen
        run: |
          ./autogen.sh
        working-directory: src

      - name: configure
        run: >
          ../src/configure --disable-install-doc --prefix=/.
          --build=$CHOST --host=$CHOST --target=$CHOST

      - name: update
        run: |
          make incs

      - name: download gems
        run: |
          make update-gems

      - name: make all
        timeout-minutes: 20
        run: |
          make

      - run: make leaked-globals

      - name: make install
        run: |
          make DESTDIR=../install install-nodoc

      - name: test
        timeout-minutes: 5
        run: |
          make test

      - name: test-all
        timeout-minutes: 45
        run: |
          # Actions uses UTF8, causes test failures, similar to normal OS setup
          chcp.com 437
          make test-all
        env:
          RUBY_TESTOPTS: -j${{env.TEST_JOBS}} --retry --job-status=normal --show-skip --timeout-scale=1.5
          BUNDLER_VERSION:

      - name: test-spec
        timeout-minutes: 10
        run: |
          make test-spec

      - uses: k0kubun/action-slack@v2.0.0
        with:
          payload: |
            {
              "ci": "GitHub Actions",
              "env": "${{ github.workflow }} ${{ matrix.msystem }} / ${{ matrix.test_task }}",
              "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref }}".split('/').reverse()[0]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SIMPLER_ALERTS_URL }} # ruby-lang slack: ruby/simpler-alerts-bot
        if: ${{ failure() && github.event_name == 'push' }}

defaults:
  run:
    working-directory: build
    shell: sh
