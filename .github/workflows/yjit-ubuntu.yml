name: YJIT Ubuntu
on:
  push:
    paths-ignore:
      - 'doc/**'
      - '**/man'
      - '**.md'
      - '**.rdoc'
      - '**/.document'
      - '.*.yml'
  pull_request:
    # Do not use paths-ignore for required status checks
    # https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/troubleshooting-required-status-checks#handling-skipped-but-required-checks
  merge_group:
    paths-ignore:
      - 'doc/**'
      - '**/man'
      - '**.md'
      - '**.rdoc'
      - '**/.document'
      - '.*.yml'

concurrency:
  group: ${{ github.workflow }} / ${{ startsWith(github.event_name, 'pull') && github.ref_name || github.sha }}
  cancel-in-progress: ${{ startsWith(github.event_name, 'pull') }}

permissions:
  contents: read

jobs:
  cargo:
    name: cargo test

    # GitHub Action's image seems to already contain a Rust 1.58.0.
    runs-on: ubuntu-20.04

    if: >-
      ${{!(false
      || contains(github.event.head_commit.message, '[DOC]')
      || contains(github.event.pull_request.title, '[DOC]')
      || contains(github.event.pull_request.labels.*.name, 'Documentation')
      || (github.event_name == 'push' && github.actor == 'dependabot[bot]')
      )}}

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      # For now we can't run cargo test --offline because it complains about the
      # capstone dependency, even though the dependency is optional
      #- run: cargo test --offline

      - run: RUST_BACKTRACE=1 cargo test
        working-directory: yjit

      # Also compile and test with all features enabled
      - run: RUST_BACKTRACE=1 cargo test --all-features
        working-directory: yjit

      # Check that we can build in release mode too
      - run: cargo build --release
        working-directory: yjit

  lint:
    name: cargo clippy

    # GitHub Action's image seems to already contain a Rust 1.58.0.
    runs-on: ubuntu-20.04

    if: >-
      ${{!(false
      || contains(github.event.head_commit.message, '[DOC]')
      || contains(github.event.pull_request.title, '[DOC]')
      || contains(github.event.pull_request.labels.*.name, 'Documentation')
      || (github.event_name == 'push' && github.actor == 'dependabot[bot]')
      )}}

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      # Check that we don't have linting errors in release mode, too
      - run: cargo clippy --all-targets --all-features
        working-directory: yjit

  make:
    strategy:
      fail-fast: false
      matrix:
        include:
          - test_task: 'yjit-bindgen'
            hint: 'To fix: use patch in logs'
            configure: '--with-gcc=clang-12 --enable-yjit=dev'

          - test_task: 'check'
            # YJIT should be automatically built in release mode on x86-64 Linux with rustc present
            #configure: "--enable-yjit RUSTC='rustc +1.58.0'"
            configure: "RUSTC='rustc +1.58.0'"
            rust_version: '1.58.0'

          - test_task: 'check'
            configure: '--enable-yjit=dev'

          - test_task: 'check'
            configure: '--enable-yjit=dev'
            yjit_opts: '--yjit-call-threshold=1 --yjit-verify-ctx --yjit-code-gc'

          - test_task: 'test-bundled-gems'
            configure: '--enable-yjit=dev'

          - test_task: 'yjit-bench'
            configure: '--enable-yjit=dev'
            yjit_bench_opts: '--yjit-stats'

    env:
      GITPULLOPTIONS: --no-tags origin ${{ github.ref }}
      RUN_OPTS: ${{ matrix.yjit_opts }}
      YJIT_BENCH_OPTS: ${{ matrix.yjit_bench_opts }}
      RUBY_DEBUG: ci
      BUNDLE_JOBS: 8 # for yjit-bench
      RUST_BACKTRACE: 1

    runs-on: ubuntu-20.04

    if: >-
      ${{!(false
      || contains(github.event.head_commit.message, '[DOC]')
      || contains(github.event.pull_request.title, '[DOC]')
      || contains(github.event.pull_request.labels.*.name, 'Documentation')
      || (github.event_name == 'push' && github.actor == 'dependabot[bot]')
      )}}

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: /.github

      - uses: ./.github/actions/setup/ubuntu

      - uses: ./.github/actions/setup/directories
        with:
          srcdir: src
          builddir: build
          makeup: true
          dummy-files: ${{ matrix.test_task == 'check' }}

      - name: Install Rust
        if: ${{ matrix.rust_version }}
        run: rustup install ${{ matrix.rust_version }} --profile minimal

      - name: Run configure
        run: ../src/configure -C --disable-install-doc --prefix=$(pwd)/install ${{ matrix.configure }}

      - run: make incs

      - run: make prepare-gems
        if: ${{ matrix.test_task == 'test-bundled-gems' }}

      - run: make

      - name: Enable YJIT through ENV
        run: echo "RUBY_YJIT_ENABLE=1" >> $GITHUB_ENV

      # Check that the binary was built with YJIT
      - name: Check YJIT enabled
        run: ./miniruby --yjit -v | grep "+YJIT"

      - name: make ${{ matrix.test_task }}
        run: make -s -j ${{ matrix.test_task }} RUN_OPTS="$RUN_OPTS" MSPECOPT=--debug YJIT_BENCH_OPTS="$YJIT_BENCH_OPTS" YJIT_BINDGEN_DIFF_OPTS="$YJIT_BINDGEN_DIFF_OPTS"
        timeout-minutes: 60
        env:
          RUBY_TESTOPTS: '-q --tty=no'
          TEST_BUNDLED_GEMS_ALLOW_FAILURES: 'typeprof'
          PRECHECK_BUNDLED_GEMS: 'no'
          SYNTAX_SUGGEST_TIMEOUT: '5'
          YJIT_BINDGEN_DIFF_OPTS: '--exit-code'
        continue-on-error: ${{ matrix.test_task == 'yjit-bench' }}

      - name: Show ${{ github.event.pull_request.base.ref }} GitHub URL for yjit-bench comparison
        run: echo "https://github.com/${BASE_REPO}/commit/${BASE_SHA}"
        env:
          BASE_REPO: ${{ github.event.pull_request.base.repo.full_name }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
        if: ${{ matrix.test_task == 'yjit-bench' && startsWith(github.event_name, 'pull') }}

      - uses: ./.github/actions/slack
        with:
          label: ${{ matrix.test_task }} ${{ matrix.configure }}
          SLACK_WEBHOOK_URL: ${{ secrets.SIMPLER_ALERTS_URL }} # ruby-lang slack: ruby/simpler-alerts-bot
        if: ${{ failure() }}

  result:
    if: ${{ always() }}
    name: ${{ github.workflow }} result
    runs-on: ubuntu-latest
    needs: [make]
    steps:
      - run: exit 1
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}

defaults:
  run:
    working-directory: build
