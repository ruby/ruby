diff --git spec/commands/clean_spec.rb spec/commands/clean_spec.rb
index 8fd4b6fbe..3d97631a1 100644
--- spec/commands/clean_spec.rb
+++ spec/commands/clean_spec.rb
@@ -679,7 +679,7 @@ RSpec.describe "bundle clean" do
     should_not_have_gems "foo-1.0"
   end
 
-  it "doesn't remove extensions artifacts from bundled git gems after clean", :rubygems => "2.2" do
+  it "doesn't remove extensions artifacts from bundled git gems after clean", :ruby_trunk, :rubygems => "2.2" do
     build_git "very_simple_git_binary", &:add_c_extension
 
     revision = revision_for(lib_path("very_simple_git_binary-1.0"))
diff --git spec/commands/exec_spec.rb spec/commands/exec_spec.rb
index d70fc636c..5ba461b91 100644
--- spec/commands/exec_spec.rb
+++ spec/commands/exec_spec.rb
@@ -25,7 +25,7 @@ RSpec.describe "bundle exec" do
     expect(out).to eq("1.0.0")
   end
 
-  it "works when running from a random directory" do
+  it "works when running from a random directory", :ruby_trunk do
     install_gemfile <<-G
       gem "rack"
     G
@@ -170,7 +170,7 @@ RSpec.describe "bundle exec" do
     expect(out).to have_rubyopts(rubyopt)
   end
 
-  it "does not duplicate already exec'ed RUBYLIB" do
+  it "does not duplicate already exec'ed RUBYLIB", :ruby_trunk do
     install_gemfile <<-G
       gem "rack"
     G
@@ -218,7 +218,7 @@ RSpec.describe "bundle exec" do
     expect(out).to include("bundler: exec needs a command to run")
   end
 
-  it "raises a helpful error when exec'ing to something outside of the bundle", :rubygems => ">= 2.5.2" do
+  it "raises a helpful error when exec'ing to something outside of the bundle", :ruby_trunk, :rubygems => ">= 2.5.2" do
     install_gemfile! <<-G
       source "file://#{gem_repo1}"
       gem "with_license"
@@ -294,35 +294,35 @@ RSpec.describe "bundle exec" do
           expect(out).to eq('args: ["-h"]')
         end
 
-        it "shows bundle-exec's man page when --help is between exec and the executable" do
+        it "shows bundle-exec's man page when --help is between exec and the executable", :ruby_trunk do
           with_fake_man do
             bundle "#{exec} --help cat"
           end
           expect(out).to include(%(["#{root}/man/bundle-exec.1"]))
         end
 
-        it "shows bundle-exec's man page when --help is before exec" do
+        it "shows bundle-exec's man page when --help is before exec", :ruby_trunk do
           with_fake_man do
             bundle "--help #{exec}"
           end
           expect(out).to include(%(["#{root}/man/bundle-exec.1"]))
         end
 
-        it "shows bundle-exec's man page when -h is before exec" do
+        it "shows bundle-exec's man page when -h is before exec", :ruby_trunk do
           with_fake_man do
             bundle "-h #{exec}"
           end
           expect(out).to include(%(["#{root}/man/bundle-exec.1"]))
         end
 
-        it "shows bundle-exec's man page when --help is after exec" do
+        it "shows bundle-exec's man page when --help is after exec", :ruby_trunk do
           with_fake_man do
             bundle "#{exec} --help"
           end
           expect(out).to include(%(["#{root}/man/bundle-exec.1"]))
         end
 
-        it "shows bundle-exec's man page when -h is after exec" do
+        it "shows bundle-exec's man page when -h is after exec", :ruby_trunk do
           with_fake_man do
             bundle "#{exec} -h"
           end
@@ -340,13 +340,13 @@ RSpec.describe "bundle exec" do
         G
       end
 
-      it "works when unlocked" do
+      it "works when unlocked", :ruby_trunk do
         bundle "exec 'cd #{tmp("gems")} && rackup'"
         expect(out).to eq("1.0.0")
         expect(out).to include("1.0.0")
       end
 
-      it "works when locked" do
+      it "works when locked", :ruby_trunk do
         expect(the_bundle).to be_locked
         bundle "exec 'cd #{tmp("gems")} && rackup'"
         expect(out).to include("1.0.0")
@@ -566,7 +566,7 @@ RSpec.describe "bundle exec" do
       it_behaves_like "it runs"
     end
 
-    context "when the file uses the current ruby shebang" do
+    context "when the file uses the current ruby shebang", :ruby_trunk do
       let(:shebang) { "#!#{Gem.ruby}" }
       it_behaves_like "it runs"
     end
diff --git spec/commands/help_spec.rb spec/commands/help_spec.rb
index 790d26fda..83b8347c4 100644
--- spec/commands/help_spec.rb
+++ spec/commands/help_spec.rb
@@ -11,21 +11,21 @@ RSpec.describe "bundle help" do
     expect(err).to include("running `gem cleanup bundler`.")
   end
 
-  it "uses mann when available" do
+  it "uses mann when available", :ruby_trunk do
     with_fake_man do
       bundle "help gemfile"
     end
     expect(out).to eq(%(["#{root}/man/gemfile.5"]))
   end
 
-  it "prefixes bundle commands with bundle- when finding the groff files" do
+  it "prefixes bundle commands with bundle- when finding the groff files", :ruby_trunk do
     with_fake_man do
       bundle "help install"
     end
     expect(out).to eq(%(["#{root}/man/bundle-install.1"]))
   end
 
-  it "simply outputs the txt file when there is no man on the path" do
+  it "simply outputs the txt file when there is no man on the path", :ruby_trunk do
     with_path_as("") do
       bundle "help install"
     end
@@ -50,28 +50,28 @@ RSpec.describe "bundle help" do
     expect(out).to eq("--help")
   end
 
-  it "is called when the --help flag is used after the command" do
+  it "is called when the --help flag is used after the command", :ruby_trunk do
     with_fake_man do
       bundle "install --help"
     end
     expect(out).to eq(%(["#{root}/man/bundle-install.1"]))
   end
 
-  it "is called when the --help flag is used before the command" do
+  it "is called when the --help flag is used before the command", :ruby_trunk do
     with_fake_man do
       bundle "--help install"
     end
     expect(out).to eq(%(["#{root}/man/bundle-install.1"]))
   end
 
-  it "is called when the -h flag is used before the command" do
+  it "is called when the -h flag is used before the command", :ruby_trunk do
     with_fake_man do
       bundle "-h install"
     end
     expect(out).to eq(%(["#{root}/man/bundle-install.1"]))
   end
 
-  it "is called when the -h flag is used after the command" do
+  it "is called when the -h flag is used after the command", :ruby_trunk do
     with_fake_man do
       bundle "install -h"
     end
@@ -85,7 +85,7 @@ RSpec.describe "bundle help" do
     expect(out).to include('Could not find command "instill".')
   end
 
-  it "is called when only using the --help flag" do
+  it "is called when only using the --help flag", :ruby_trunk do
     with_fake_man do
       bundle "--help"
     end
diff --git spec/commands/info_spec.rb spec/commands/info_spec.rb
index b37de765e..7264af31c 100644
--- spec/commands/info_spec.rb
+++ spec/commands/info_spec.rb
@@ -25,7 +25,7 @@ RSpec.describe "bundle info" do
       end
     end
 
-    context "given a default gem shippped in ruby" do
+    context "given a default gem shippped in ruby", :ruby_trunk do
       it "prints information about the default gem", :if => (RUBY_VERSION >= "2.0") do
         bundle "info rdoc"
         expect(out).to include("* rdoc")
diff --git spec/commands/newgem_spec.rb spec/commands/newgem_spec.rb
index a3c3a3641..9861e886d 100644
--- spec/commands/newgem_spec.rb
+++ spec/commands/newgem_spec.rb
@@ -328,7 +328,7 @@ RSpec.describe "bundle gem" do
       end
 
       Dir.chdir(bundled_app(gem_name)) do
-        sys_exec("rake")
+        sys_exec(rake)
         expect(out).to include("SUCCESS")
       end
     end
@@ -613,7 +613,7 @@ RSpec.describe "bundle gem" do
       end
 
       Dir.chdir(bundled_app(gem_name)) do
-        sys_exec("rake")
+        sys_exec(rake)
         expect(out).to include("SUCCESS")
       end
     end
diff --git spec/commands/show_spec.rb spec/commands/show_spec.rb
index 45af03595..2fbb61bbc 100644
--- spec/commands/show_spec.rb
+++ spec/commands/show_spec.rb
@@ -40,7 +40,7 @@ RSpec.describe "bundle show" do
       expect(out).to include(default_bundle_path("gems", "rails-2.3.2").to_s)
     end
 
-    it "prints the path to the running bundler" do
+    it "prints the path to the running bundler", :ruby_trunk do
       bundle "show bundler"
       expect(out).to eq(File.expand_path("../../../", __FILE__))
     end
diff --git spec/install/gemfile/git_spec.rb spec/install/gemfile/git_spec.rb
index 8843fb7eb..965e75b22 100644
--- spec/install/gemfile/git_spec.rb
+++ spec/install/gemfile/git_spec.rb
@@ -1005,7 +1005,7 @@ RSpec.describe "bundle install with git sources" do
   end
 
   context "with an extension" do
-    it "installs the extension" do
+    it "installs the extension", :ruby_trunk do
       build_git "foo" do |s|
         s.add_dependency "rake"
         s.extensions << "Rakefile"
@@ -1037,7 +1037,7 @@ RSpec.describe "bundle install with git sources" do
       expect(out).to eq(Pathname.glob(system_gem_path("bundler/gems/extensions/**/foo-1.0-*")).first.to_s)
     end
 
-    it "does not use old extension after ref changes" do
+    it "does not use old extension after ref changes", :ruby_trunk do
       git_reader = build_git "foo", :no_default => true do |s|
         s.extensions = ["ext/extconf.rb"]
         s.write "ext/extconf.rb", <<-RUBY
@@ -1099,7 +1099,7 @@ In Gemfile:
       expect(out).not_to include("gem install foo")
     end
 
-    it "does not reinstall the extension", :rubygems => ">= 2.3.0" do
+    it "does not reinstall the extension", :ruby_trunk, :rubygems => ">= 2.3.0" do
       build_git "foo" do |s|
         s.add_dependency "rake"
         s.extensions << "Rakefile"
diff --git spec/install/gems/compact_index_spec.rb spec/install/gems/compact_index_spec.rb
index 825185c82..03b54cf29 100644
--- spec/install/gems/compact_index_spec.rb
+++ spec/install/gems/compact_index_spec.rb
@@ -613,7 +613,7 @@ The checksum of /versions does not match the checksum provided by the server! So
     end
   end
 
-  context "when ruby is compiled without openssl" do
+  context "when ruby is compiled without openssl", :ruby_trunk do
     before do
       # Install a monkeypatch that reproduces the effects of openssl being
       # missing when the fetcher runs, as happens in real life. The reason
diff --git spec/install/gems/dependency_api_spec.rb spec/install/gems/dependency_api_spec.rb
index d2de0d358..12b9bab07 100644
--- spec/install/gems/dependency_api_spec.rb
+++ spec/install/gems/dependency_api_spec.rb
@@ -602,7 +602,7 @@ RSpec.describe "gemcutter's dependency API" do
     end
   end
 
-  context "when ruby is compiled without openssl" do
+  context "when ruby is compiled without openssl", :ruby_trunk do
     before do
       # Install a monkeypatch that reproduces the effects of openssl being
       # missing when the fetcher runs, as happens in real life. The reason
diff --git spec/install/gems/native_extensions_spec.rb spec/install/gems/native_extensions_spec.rb
index 7531768b5..053fa8e20 100644
--- spec/install/gems/native_extensions_spec.rb
+++ spec/install/gems/native_extensions_spec.rb
@@ -1,7 +1,7 @@
 # frozen_string_literal: true
 require "spec_helper"
 
-RSpec.describe "installing a gem with native extensions" do
+RSpec.describe "installing a gem with native extensions", :ruby_trunk do
   it "installs" do
     build_repo2 do
       build_gem "c_extension" do |s|
diff --git spec/install/gems/resolving_spec.rb spec/install/gems/resolving_spec.rb
index c22799344..1f0370ed2 100644
--- spec/install/gems/resolving_spec.rb
+++ spec/install/gems/resolving_spec.rb
@@ -2,7 +2,7 @@
 require "spec_helper"
 
 RSpec.describe "bundle install with install-time dependencies" do
-  it "installs gems with implicit rake dependencies" do
+  it "installs gems with implicit rake dependencies", :ruby_trunk do
     install_gemfile <<-G
       source "file://#{gem_repo1}"
       gem "with_implicit_rake_dep"
@@ -49,7 +49,7 @@ RSpec.describe "bundle install with install-time dependencies" do
       expect(the_bundle).to include_gems "net_b 1.0"
     end
 
-    it "installs plugins depended on by other plugins" do
+    it "installs plugins depended on by other plugins", :ruby_trunk do
       install_gemfile <<-G
         source "file://#{gem_repo1}"
         gem "net_a"
@@ -58,7 +58,7 @@ RSpec.describe "bundle install with install-time dependencies" do
       expect(the_bundle).to include_gems "net_a 1.0", "net_b 1.0"
     end
 
-    it "installs multiple levels of dependencies" do
+    it "installs multiple levels of dependencies", :ruby_trunk do
       install_gemfile <<-G
         source "file://#{gem_repo1}"
         gem "net_c"
diff --git spec/install/gems/standalone_spec.rb spec/install/gems/standalone_spec.rb
index 496844ae1..1bff30617 100644
--- spec/install/gems/standalone_spec.rb
+++ spec/install/gems/standalone_spec.rb
@@ -67,7 +67,7 @@ RSpec.shared_examples "bundle install --standalone" do
     include_examples "common functionality"
   end
 
-  describe "with gems with native extension" do
+  describe "with gems with native extension", :ruby_trunk do
     before do
       install_gemfile <<-G, :standalone => true
         source "file://#{gem_repo1}"
diff --git spec/install/path_spec.rb spec/install/path_spec.rb
index ad6071d29..690751fda 100644
--- spec/install/path_spec.rb
+++ spec/install/path_spec.rb
@@ -129,7 +129,7 @@ RSpec.describe "bundle install" do
       expect(the_bundle).to include_gems "rack 1.0.0"
     end
 
-    it "re-installs gems whose extensions have been deleted", :rubygems => ">= 2.3" do
+    it "re-installs gems whose extensions have been deleted", :ruby_trunk, :rubygems => ">= 2.3" do
       build_lib "very_simple_binary", "1.0.0", :to_system => true do |s|
         s.write "lib/very_simple_binary.rb", "raise 'FAIL'"
       end
diff --git spec/runtime/gem_tasks_spec.rb spec/runtime/gem_tasks_spec.rb
index 422ec4547..7cb0f32c0 100644
--- spec/runtime/gem_tasks_spec.rb
+++ spec/runtime/gem_tasks_spec.rb
@@ -20,7 +20,7 @@ RSpec.describe "require 'bundler/gem_tasks'" do
 
   it "includes the relevant tasks" do
     with_gem_path_as(Spec::Path.base_system_gems.to_s) do
-      sys_exec "ruby -S rake -T"
+      sys_exec "#{rake} -T"
     end
 
     expect(err).to eq("")
diff --git spec/runtime/setup_spec.rb spec/runtime/setup_spec.rb
index 754ec94d1..2a32b639a 100644
--- spec/runtime/setup_spec.rb
+++ spec/runtime/setup_spec.rb
@@ -120,7 +120,7 @@ RSpec.describe "Bundler.setup" do
       lp.map! {|p| p.sub(/^#{system_gem_path}/, "") }
     end
 
-    it "puts loaded gems after -I and RUBYLIB" do
+    it "puts loaded gems after -I and RUBYLIB", :ruby_trunk do
       install_gemfile <<-G
         source "file://#{gem_repo1}"
         gem "rack"
@@ -145,7 +145,7 @@ RSpec.describe "Bundler.setup" do
       expect(rack_load_order).to be > 0
     end
 
-    it "orders the load path correctly when there are dependencies" do
+    it "orders the load path correctly when there are dependencies", :ruby_trunk do
       install_gemfile <<-G
         source "file://#{gem_repo1}"
         gem "rails"
@@ -759,7 +759,7 @@ end
     expect(out).to eq("yay")
   end
 
-  it "should clean $LOAD_PATH properly" do
+  it "should clean $LOAD_PATH properly", :ruby_trunk do
     gem_name = "very_simple_binary"
     full_gem_name = gem_name + "-1.0"
     ext_dir = File.join(tmp "extenstions", full_gem_name)
diff --git spec/runtime/with_clean_env_spec.rb spec/runtime/with_clean_env_spec.rb
index b351e86c8..5baaf61be 100644
--- spec/runtime/with_clean_env_spec.rb
+++ spec/runtime/with_clean_env_spec.rb
@@ -8,7 +8,7 @@ RSpec.describe "Bundler.with_env helpers" do
       bundle "install --path vendor/bundle"
     end
 
-    it "should return the PATH present before bundle was activated" do
+    it "should return the PATH present before bundle was activated", :ruby_trunk do
       code = "print Bundler.original_env['PATH']"
       path = `getconf PATH`.strip + "#{File::PATH_SEPARATOR}/foo"
       with_path_as(path) do
@@ -26,7 +26,7 @@ RSpec.describe "Bundler.with_env helpers" do
       end
     end
 
-    it "works with nested bundle exec invocations" do
+    it "works with nested bundle exec invocations", :ruby_trunk do
       create_file("exe.rb", <<-'RB')
         count = ARGV.first.to_i
         exit if count < 0
@@ -68,7 +68,7 @@ RSpec.describe "Bundler.with_env helpers" do
       expect(result).not_to include("-rbundler/setup")
     end
 
-    it "should clean up RUBYLIB" do
+    it "should clean up RUBYLIB", :ruby_trunk do
       code = "print Bundler.clean_env['RUBYLIB']"
       ENV["RUBYLIB"] = File.expand_path("../../../lib", __FILE__) + File::PATH_SEPARATOR + "/foo"
       result = bundle("exec ruby -e #{code.inspect}")
diff --git spec/spec_helper.rb spec/spec_helper.rb
index 297d81f53..6231509ed 100644
--- spec/spec_helper.rb
+++ spec/spec_helper.rb
@@ -51,6 +51,12 @@ ENV["THOR_COLUMNS"] = "10000"
 
 Spec::CodeClimate.setup
 
+module Gem
+  def self.ruby= ruby
+    @ruby = ruby
+  end
+end
+
 RSpec.configure do |config|
   config.include Spec::Builders
   config.include Spec::Helpers
@@ -91,6 +97,7 @@ RSpec.configure do |config|
   config.filter_run_excluding :rubygems => LessThanProc.with(Gem::VERSION)
   config.filter_run_excluding :git => LessThanProc.with(git_version)
   config.filter_run_excluding :rubygems_master => (ENV["RGV"] != "master")
+  config.filter_run_excluding :ruby_trunk => !!(ENV["BUNDLE_RUBY"] && ENV["BUNDLE_GEM"])
 
   config.filter_run_when_matching :focus unless ENV["CI"]
 
@@ -101,6 +108,14 @@ RSpec.configure do |config|
     c.syntax = :expect
   end
 
+  config.before :suite do
+    @orig_ruby = if ENV['BUNDLE_RUBY']
+                   ruby = Gem.ruby
+                   Gem.ruby = ENV['BUNDLE_RUBY']
+                   ruby
+                 end
+  end
+
   config.before :all do
     build_repo1
     # HACK: necessary until rspec-mocks > 3.5.0 is used
@@ -133,4 +148,8 @@ RSpec.configure do |config|
     Dir.chdir(original_wd)
     ENV.replace(original_env)
   end
+
+  config.after :suite do
+    Gem.ruby = @orig_ruby
+  end
 end
diff --git spec/support/helpers.rb spec/support/helpers.rb
index d971ea92c..a2e6a740b 100644
--- spec/support/helpers.rb
+++ spec/support/helpers.rb
@@ -156,10 +156,19 @@ module Spec
         args = args.gsub(/(?=")/, "\\")
         args = %("#{args}")
       end
-      sys_exec("#{Gem.ruby} -rubygems -S gem --backtrace #{command} #{args}")
+      gem = ENV['BUNDLE_GEM'] || "#{Gem.ruby} -rubygems -S gem --backtrace"
+      sys_exec("#{gem} #{command} #{args}")
     end
     bang :gem_command
 
+    def rake
+      if ENV['BUNDLE_RUBY'] && ENV['BUNDLE_GEM']
+        "#{ENV['BUNDLE_RUBY']} #{ENV['GEM_PATH']}/bin/rake"
+      else
+        'rake'
+      end
+    end
+
     def sys_exec(cmd)
       Open3.popen3(cmd.to_s) do |stdin, stdout, stderr, wait_thr|
         yield stdin, stdout, wait_thr if block_given?
