@ ProgramNode (location: (1,0)-(3,26))
├── locals: []
└── statements:
    @ StatementsNode (location: (1,0)-(3,26))
    └── body: (length: 2)
        ├── @ IfNode (location: (1,0)-(1,30))
        │   ├── if_keyword_loc: (1,0)-(1,2) = "if"
        │   ├── predicate:
        │   │   @ CallNode (location: (1,3)-(1,6))
        │   │   ├── flags: variable_call
        │   │   ├── receiver: ∅
        │   │   ├── call_operator_loc: ∅
        │   │   ├── name: :foo
        │   │   ├── message_loc: (1,3)-(1,6) = "foo"
        │   │   ├── opening_loc: ∅
        │   │   ├── arguments: ∅
        │   │   ├── closing_loc: ∅
        │   │   └── block: ∅
        │   ├── then_keyword_loc: (1,7)-(1,11) = "then"
        │   ├── statements:
        │   │   @ StatementsNode (location: (1,12)-(1,15))
        │   │   └── body: (length: 1)
        │   │       └── @ CallNode (location: (1,12)-(1,15))
        │   │           ├── flags: variable_call
        │   │           ├── receiver: ∅
        │   │           ├── call_operator_loc: ∅
        │   │           ├── name: :bar
        │   │           ├── message_loc: (1,12)-(1,15) = "bar"
        │   │           ├── opening_loc: ∅
        │   │           ├── arguments: ∅
        │   │           ├── closing_loc: ∅
        │   │           └── block: ∅
        │   ├── consequent:
        │   │   @ ElseNode (location: (1,17)-(1,30))
        │   │   ├── else_keyword_loc: (1,17)-(1,21) = "else"
        │   │   ├── statements:
        │   │   │   @ StatementsNode (location: (1,22)-(1,25))
        │   │   │   └── body: (length: 1)
        │   │   │       └── @ CallNode (location: (1,22)-(1,25))
        │   │   │           ├── flags: variable_call
        │   │   │           ├── receiver: ∅
        │   │   │           ├── call_operator_loc: ∅
        │   │   │           ├── name: :baz
        │   │   │           ├── message_loc: (1,22)-(1,25) = "baz"
        │   │   │           ├── opening_loc: ∅
        │   │   │           ├── arguments: ∅
        │   │   │           ├── closing_loc: ∅
        │   │   │           └── block: ∅
        │   │   └── end_keyword_loc: (1,27)-(1,30) = "end"
        │   └── end_keyword_loc: (1,27)-(1,30) = "end"
        └── @ IfNode (location: (3,0)-(3,26))
            ├── if_keyword_loc: (3,0)-(3,2) = "if"
            ├── predicate:
            │   @ CallNode (location: (3,3)-(3,6))
            │   ├── flags: variable_call
            │   ├── receiver: ∅
            │   ├── call_operator_loc: ∅
            │   ├── name: :foo
            │   ├── message_loc: (3,3)-(3,6) = "foo"
            │   ├── opening_loc: ∅
            │   ├── arguments: ∅
            │   ├── closing_loc: ∅
            │   └── block: ∅
            ├── then_keyword_loc: ∅
            ├── statements:
            │   @ StatementsNode (location: (3,8)-(3,11))
            │   └── body: (length: 1)
            │       └── @ CallNode (location: (3,8)-(3,11))
            │           ├── flags: variable_call
            │           ├── receiver: ∅
            │           ├── call_operator_loc: ∅
            │           ├── name: :bar
            │           ├── message_loc: (3,8)-(3,11) = "bar"
            │           ├── opening_loc: ∅
            │           ├── arguments: ∅
            │           ├── closing_loc: ∅
            │           └── block: ∅
            ├── consequent:
            │   @ ElseNode (location: (3,13)-(3,26))
            │   ├── else_keyword_loc: (3,13)-(3,17) = "else"
            │   ├── statements:
            │   │   @ StatementsNode (location: (3,18)-(3,21))
            │   │   └── body: (length: 1)
            │   │       └── @ CallNode (location: (3,18)-(3,21))
            │   │           ├── flags: variable_call
            │   │           ├── receiver: ∅
            │   │           ├── call_operator_loc: ∅
            │   │           ├── name: :baz
            │   │           ├── message_loc: (3,18)-(3,21) = "baz"
            │   │           ├── opening_loc: ∅
            │   │           ├── arguments: ∅
            │   │           ├── closing_loc: ∅
            │   │           └── block: ∅
            │   └── end_keyword_loc: (3,23)-(3,26) = "end"
            └── end_keyword_loc: (3,23)-(3,26) = "end"
