@ ProgramNode (location: (1,0)-(1,20))
├── locals: [:a, :b]
└── statements:
    @ StatementsNode (location: (1,0)-(1,20))
    └── body: (length: 1)
        └── @ IfNode (location: (1,0)-(1,20))
            ├── if_keyword_loc: (1,0)-(1,2) = "if"
            ├── predicate:
            │   @ ParenthesesNode (location: (1,3)-(1,15))
            │   ├── body:
            │   │   @ StatementsNode (location: (1,4)-(1,14))
            │   │   └── body: (length: 1)
            │   │       └── @ MultiWriteNode (location: (1,4)-(1,14))
            │   │           ├── targets: (length: 2)
            │   │           │   ├── @ LocalVariableTargetNode (location: (1,4)-(1,5))
            │   │           │   │   ├── name: :a
            │   │           │   │   └── depth: 0
            │   │           │   └── @ LocalVariableTargetNode (location: (1,7)-(1,8))
            │   │           │       ├── name: :b
            │   │           │       └── depth: 0
            │   │           ├── lparen_loc: ∅
            │   │           ├── rparen_loc: ∅
            │   │           ├── operator_loc: (1,9)-(1,10) = "="
            │   │           └── value:
            │   │               @ CallNode (location: (1,11)-(1,14))
            │   │               ├── receiver: ∅
            │   │               ├── call_operator_loc: ∅
            │   │               ├── message_loc: (1,11)-(1,14) = "foo"
            │   │               ├── opening_loc: ∅
            │   │               ├── arguments: ∅
            │   │               ├── closing_loc: ∅
            │   │               ├── block: ∅
            │   │               ├── flags: variable_call
            │   │               └── name: :foo
            │   ├── opening_loc: (1,3)-(1,4) = "("
            │   └── closing_loc: (1,14)-(1,15) = ")"
            ├── statements: ∅
            ├── consequent: ∅
            └── end_keyword_loc: (1,17)-(1,20) = "end"
