@ ProgramNode (location: (1,0)-(3,30))
├── locals: []
└── statements:
    @ StatementsNode (location: (1,0)-(3,30))
    └── body: (length: 2)
        ├── @ UnlessNode (location: (1,0)-(1,34))
        │   ├── keyword_loc: (1,0)-(1,6) = "unless"
        │   ├── predicate:
        │   │   @ CallNode (location: (1,7)-(1,10))
        │   │   ├── receiver: ∅
        │   │   ├── call_operator_loc: ∅
        │   │   ├── message_loc: (1,7)-(1,10) = "foo"
        │   │   ├── opening_loc: ∅
        │   │   ├── arguments: ∅
        │   │   ├── closing_loc: ∅
        │   │   ├── block: ∅
        │   │   ├── flags: variable_call
        │   │   └── name: :foo
        │   ├── statements:
        │   │   @ StatementsNode (location: (1,16)-(1,19))
        │   │   └── body: (length: 1)
        │   │       └── @ CallNode (location: (1,16)-(1,19))
        │   │           ├── receiver: ∅
        │   │           ├── call_operator_loc: ∅
        │   │           ├── message_loc: (1,16)-(1,19) = "bar"
        │   │           ├── opening_loc: ∅
        │   │           ├── arguments: ∅
        │   │           ├── closing_loc: ∅
        │   │           ├── block: ∅
        │   │           ├── flags: variable_call
        │   │           └── name: :bar
        │   ├── consequent:
        │   │   @ ElseNode (location: (1,21)-(1,34))
        │   │   ├── else_keyword_loc: (1,21)-(1,25) = "else"
        │   │   ├── statements:
        │   │   │   @ StatementsNode (location: (1,26)-(1,29))
        │   │   │   └── body: (length: 1)
        │   │   │       └── @ CallNode (location: (1,26)-(1,29))
        │   │   │           ├── receiver: ∅
        │   │   │           ├── call_operator_loc: ∅
        │   │   │           ├── message_loc: (1,26)-(1,29) = "baz"
        │   │   │           ├── opening_loc: ∅
        │   │   │           ├── arguments: ∅
        │   │   │           ├── closing_loc: ∅
        │   │   │           ├── block: ∅
        │   │   │           ├── flags: variable_call
        │   │   │           └── name: :baz
        │   │   └── end_keyword_loc: (1,31)-(1,34) = "end"
        │   └── end_keyword_loc: (1,31)-(1,34) = "end"
        └── @ UnlessNode (location: (3,0)-(3,30))
            ├── keyword_loc: (3,0)-(3,6) = "unless"
            ├── predicate:
            │   @ CallNode (location: (3,7)-(3,10))
            │   ├── receiver: ∅
            │   ├── call_operator_loc: ∅
            │   ├── message_loc: (3,7)-(3,10) = "foo"
            │   ├── opening_loc: ∅
            │   ├── arguments: ∅
            │   ├── closing_loc: ∅
            │   ├── block: ∅
            │   ├── flags: variable_call
            │   └── name: :foo
            ├── statements:
            │   @ StatementsNode (location: (3,12)-(3,15))
            │   └── body: (length: 1)
            │       └── @ CallNode (location: (3,12)-(3,15))
            │           ├── receiver: ∅
            │           ├── call_operator_loc: ∅
            │           ├── message_loc: (3,12)-(3,15) = "bar"
            │           ├── opening_loc: ∅
            │           ├── arguments: ∅
            │           ├── closing_loc: ∅
            │           ├── block: ∅
            │           ├── flags: variable_call
            │           └── name: :bar
            ├── consequent:
            │   @ ElseNode (location: (3,17)-(3,30))
            │   ├── else_keyword_loc: (3,17)-(3,21) = "else"
            │   ├── statements:
            │   │   @ StatementsNode (location: (3,22)-(3,25))
            │   │   └── body: (length: 1)
            │   │       └── @ CallNode (location: (3,22)-(3,25))
            │   │           ├── receiver: ∅
            │   │           ├── call_operator_loc: ∅
            │   │           ├── message_loc: (3,22)-(3,25) = "baz"
            │   │           ├── opening_loc: ∅
            │   │           ├── arguments: ∅
            │   │           ├── closing_loc: ∅
            │   │           ├── block: ∅
            │   │           ├── flags: variable_call
            │   │           └── name: :baz
            │   └── end_keyword_loc: (3,27)-(3,30) = "end"
            └── end_keyword_loc: (3,27)-(3,30) = "end"
