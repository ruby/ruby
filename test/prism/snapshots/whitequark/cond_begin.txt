@ ProgramNode (location: (1,0)-(1,18))
├── flags: ∅
├── locals: []
└── statements:
    @ StatementsNode (location: (1,0)-(1,18))
    ├── flags: ∅
    └── body: (length: 1)
        └── @ IfNode (location: (1,0)-(1,18))
            ├── flags: newline
            ├── if_keyword_loc: (1,0)-(1,2) = "if"
            ├── predicate:
            │   @ ParenthesesNode (location: (1,3)-(1,8))
            │   ├── flags: ∅
            │   ├── body:
            │   │   @ StatementsNode (location: (1,4)-(1,7))
            │   │   ├── flags: ∅
            │   │   └── body: (length: 1)
            │   │       └── @ CallNode (location: (1,4)-(1,7))
            │   │           ├── flags: newline, variable_call, ignore_visibility
            │   │           ├── receiver: ∅
            │   │           ├── call_operator_loc: ∅
            │   │           ├── name: :bar
            │   │           ├── message_loc: (1,4)-(1,7) = "bar"
            │   │           ├── opening_loc: ∅
            │   │           ├── arguments: ∅
            │   │           ├── closing_loc: ∅
            │   │           └── block: ∅
            │   ├── opening_loc: (1,3)-(1,4) = "("
            │   └── closing_loc: (1,7)-(1,8) = ")"
            ├── then_keyword_loc: ∅
            ├── statements:
            │   @ StatementsNode (location: (1,10)-(1,13))
            │   ├── flags: ∅
            │   └── body: (length: 1)
            │       └── @ CallNode (location: (1,10)-(1,13))
            │           ├── flags: newline, variable_call, ignore_visibility
            │           ├── receiver: ∅
            │           ├── call_operator_loc: ∅
            │           ├── name: :foo
            │           ├── message_loc: (1,10)-(1,13) = "foo"
            │           ├── opening_loc: ∅
            │           ├── arguments: ∅
            │           ├── closing_loc: ∅
            │           └── block: ∅
            ├── consequent: ∅
            └── end_keyword_loc: (1,15)-(1,18) = "end"
