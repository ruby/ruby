@ ProgramNode (location: (1,0)-(7,3))
├── locals: []
└── statements:
    @ StatementsNode (location: (1,0)-(7,3))
    └── body: (length: 2)
        ├── @ DefNode (location: (1,0)-(3,3))
        │   ├── name: :foo
        │   ├── name_loc: (1,4)-(1,7) = "foo"
        │   ├── receiver: ∅
        │   ├── parameters: ∅
        │   ├── body:
        │   │   @ StatementsNode (location: (2,2)-(2,9))
        │   │   └── body: (length: 1)
        │   │       └── @ ParenthesesNode (location: (2,2)-(2,9))
        │   │           ├── body:
        │   │           │   @ StatementsNode (location: (2,3)-(2,8))
        │   │           │   └── body: (length: 1)
        │   │           │       └── @ CallNode (location: (2,3)-(2,8))
        │   │           │           ├── receiver:
        │   │           │           │   @ CallNode (location: (2,3)-(2,4))
        │   │           │           │   ├── receiver: ∅
        │   │           │           │   ├── call_operator_loc: ∅
        │   │           │           │   ├── message_loc: (2,3)-(2,4) = "a"
        │   │           │           │   ├── opening_loc: ∅
        │   │           │           │   ├── arguments: ∅
        │   │           │           │   ├── closing_loc: ∅
        │   │           │           │   ├── block: ∅
        │   │           │           │   ├── flags: variable_call
        │   │           │           │   └── name: :a
        │   │           │           ├── call_operator_loc: ∅
        │   │           │           ├── message_loc: (2,5)-(2,6) = "-"
        │   │           │           ├── opening_loc: ∅
        │   │           │           ├── arguments:
        │   │           │           │   @ ArgumentsNode (location: (2,7)-(2,8))
        │   │           │           │   ├── arguments: (length: 1)
        │   │           │           │   │   └── @ CallNode (location: (2,7)-(2,8))
        │   │           │           │   │       ├── receiver: ∅
        │   │           │           │   │       ├── call_operator_loc: ∅
        │   │           │           │   │       ├── message_loc: (2,7)-(2,8) = "b"
        │   │           │           │   │       ├── opening_loc: ∅
        │   │           │           │   │       ├── arguments: ∅
        │   │           │           │   │       ├── closing_loc: ∅
        │   │           │           │   │       ├── block: ∅
        │   │           │           │   │       ├── flags: variable_call
        │   │           │           │   │       └── name: :b
        │   │           │           │   └── flags: ∅
        │   │           │           ├── closing_loc: ∅
        │   │           │           ├── block: ∅
        │   │           │           ├── flags: ∅
        │   │           │           └── name: :-
        │   │           ├── opening_loc: (2,2)-(2,3) = "("
        │   │           └── closing_loc: (2,8)-(2,9) = ")"
        │   ├── locals: []
        │   ├── def_keyword_loc: (1,0)-(1,3) = "def"
        │   ├── operator_loc: ∅
        │   ├── lparen_loc: ∅
        │   ├── rparen_loc: ∅
        │   ├── equal_loc: ∅
        │   └── end_keyword_loc: (3,0)-(3,3) = "end"
        └── @ DefNode (location: (5,0)-(7,3))
            ├── name: :foo
            ├── name_loc: (5,4)-(5,7) = "foo"
            ├── receiver: ∅
            ├── parameters: ∅
            ├── body:
            │   @ StatementsNode (location: (6,2)-(6,20))
            │   └── body: (length: 1)
            │       └── @ RescueModifierNode (location: (6,2)-(6,20))
            │           ├── expression:
            │           │   @ CallNode (location: (6,2)-(6,3))
            │           │   ├── receiver: ∅
            │           │   ├── call_operator_loc: ∅
            │           │   ├── message_loc: (6,2)-(6,3) = "a"
            │           │   ├── opening_loc: ∅
            │           │   ├── arguments: ∅
            │           │   ├── closing_loc: ∅
            │           │   ├── block: ∅
            │           │   ├── flags: variable_call
            │           │   └── name: :a
            │           ├── keyword_loc: (6,4)-(6,10) = "rescue"
            │           └── rescue_expression:
            │               @ ConstantReadNode (location: (6,11)-(6,20))
            │               └── name: :Exception
            ├── locals: []
            ├── def_keyword_loc: (5,0)-(5,3) = "def"
            ├── operator_loc: ∅
            ├── lparen_loc: ∅
            ├── rparen_loc: ∅
            ├── equal_loc: ∅
            └── end_keyword_loc: (7,0)-(7,3) = "end"
