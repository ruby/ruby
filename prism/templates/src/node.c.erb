#line <%= __LINE__ + 1 %> "<%= File.basename(__FILE__) %>"
#include "prism/node.h"

static void
pm_node_memsize_node(pm_node_t *node, pm_memsize_t *memsize);

/**
 * Calculate the size of the node list in bytes.
 */
static size_t
pm_node_list_memsize(pm_node_list_t *node_list, pm_memsize_t *memsize) {
    size_t size = sizeof(pm_node_list_t) + (node_list->capacity * sizeof(pm_node_t *));
    for (size_t index = 0; index < node_list->size; index++) {
        pm_node_memsize_node(node_list->nodes[index], memsize);
    }
    return size;
}

/**
 * Append a new node onto the end of the node list.
 */
void
pm_node_list_append(pm_node_list_t *list, pm_node_t *node) {
    if (list->size == list->capacity) {
        list->capacity = list->capacity == 0 ? 4 : list->capacity * 2;
        list->nodes = (pm_node_t **) realloc(list->nodes, sizeof(pm_node_t *) * list->capacity);
    }
    list->nodes[list->size++] = node;
}

PRISM_EXPORTED_FUNCTION void
pm_node_destroy(pm_parser_t *parser, pm_node_t *node);

/**
 * Deallocate the inner memory of a list of nodes. The parser argument is not
 * used, but is here for the future possibility of pre-allocating memory pools.
 */
static void
pm_node_list_free(pm_parser_t *parser, pm_node_list_t *list) {
    if (list->capacity > 0) {
        for (size_t index = 0; index < list->size; index++) {
            pm_node_destroy(parser, list->nodes[index]);
        }
        free(list->nodes);
    }
}

/**
 * Deallocate the space for a pm_node_t. Similarly to pm_node_alloc, we're not
 * using the parser argument, but it's there to allow for the future possibility
 * of pre-allocating larger memory pools.
 */
PRISM_EXPORTED_FUNCTION void
pm_node_destroy(pm_parser_t *parser, pm_node_t *node) {
    switch (PM_NODE_TYPE(node)) {
        <%- nodes.each do |node| -%>
#line <%= __LINE__ + 1 %> "<%= File.basename(__FILE__) %>"
        case <%= node.type %>: {
            <%- if node.fields.any? { |field| ![Prism::LocationField, Prism::OptionalLocationField, Prism::UInt8Field, Prism::UInt32Field, Prism::FlagsField, Prism::ConstantField, Prism::OptionalConstantField].include?(field.class) } -%>
            pm_<%= node.human %>_t *cast = (pm_<%= node.human %>_t *) node;
            <%- end -%>
            <%- node.fields.each do |field| -%>
            <%- case field -%>
            <%- when Prism::LocationField, Prism::OptionalLocationField, Prism::UInt8Field, Prism::UInt32Field, Prism::FlagsField, Prism::ConstantField, Prism::OptionalConstantField -%>
            <%- when Prism::NodeField -%>
            pm_node_destroy(parser, (pm_node_t *)cast-><%= field.name %>);
            <%- when Prism::OptionalNodeField -%>
            if (cast-><%= field.name %> != NULL) {
                pm_node_destroy(parser, (pm_node_t *)cast-><%= field.name %>);
            }
            <%- when Prism::StringField -%>
            pm_string_free(&cast-><%= field.name %>);
            <%- when Prism::NodeListField -%>
            pm_node_list_free(parser, &cast-><%= field.name %>);
            <%- when Prism::ConstantListField -%>
            pm_constant_id_list_free(&cast-><%= field.name %>);
            <%- else -%>
            <%- raise -%>
            <%- end -%>
            <%- end -%>
            break;
        }
        <%- end -%>
#line <%= __LINE__ + 1 %> "<%= File.basename(__FILE__) %>"
        default:
            assert(false && "unreachable");
            break;
    }
    free(node);
}

static void
pm_node_memsize_node(pm_node_t *node, pm_memsize_t *memsize) {
    memsize->node_count++;

    switch (PM_NODE_TYPE(node)) {
        // We do not calculate memsize of a ScopeNode
        // as it should never be generated
        case PM_SCOPE_NODE:
            return;
        <%- nodes.each do |node| -%>
#line <%= __LINE__ + 1 %> "<%= File.basename(__FILE__) %>"
        case <%= node.type %>: {
            pm_<%= node.human %>_t *cast = (pm_<%= node.human %>_t *) node;
            memsize->memsize += sizeof(*cast);
            <%- if node.fields.any? { |f| f.is_a?(Prism::NodeListField) } -%>
            // Node lists will add in their own sizes below.
            memsize->memsize -= sizeof(pm_node_list_t) * <%= node.fields.count { |f| f.is_a?(Prism::NodeListField) } %>;
            <%- end -%>
            <%- if node.fields.any? { |f| f.is_a?(Prism::ConstantListField) } -%>
            // Constant id lists will add in their own sizes below.
            memsize->memsize -= sizeof(pm_constant_id_list_t) * <%= node.fields.count { |f| f.is_a?(Prism::ConstantListField) } %>;
            <%- end -%>
            <%- node.fields.each do |field| -%>
            <%- case field -%>
            <%- when Prism::ConstantField, Prism::OptionalConstantField, Prism::UInt8Field, Prism::UInt32Field, Prism::FlagsField, Prism::LocationField, Prism::OptionalLocationField -%>
            <%- when Prism::NodeField -%>
            pm_node_memsize_node((pm_node_t *)cast-><%= field.name %>, memsize);
            <%- when Prism::OptionalNodeField -%>
            if (cast-><%= field.name %> != NULL) {
                pm_node_memsize_node((pm_node_t *)cast-><%= field.name %>, memsize);
            }
            <%- when Prism::StringField -%>
            memsize->memsize += pm_string_memsize(&cast-><%= field.name %>);
            <%- when Prism::NodeListField -%>
            memsize->memsize += pm_node_list_memsize(&cast-><%= field.name %>, memsize);
            <%- when Prism::ConstantListField -%>
            memsize->memsize += pm_constant_id_list_memsize(&cast-><%= field.name %>);
            <%- else -%>
            <%- raise -%>
            <%- end -%>
            <%- end -%>
            break;
        }
        <%- end -%>
#line <%= __LINE__ + 1 %> "<%= File.basename(__FILE__) %>"
    }
}

/**
 * Calculates the memory footprint of a given node.
 */
PRISM_EXPORTED_FUNCTION void
pm_node_memsize(pm_node_t *node, pm_memsize_t *memsize) {
    *memsize = (pm_memsize_t) { .memsize = 0, .node_count = 0 };
    pm_node_memsize_node(node, memsize);
}

/**
 * Returns a string representation of the given node type.
 */
PRISM_EXPORTED_FUNCTION const char *
pm_node_type_to_str(pm_node_type_t node_type)
{
    switch (node_type) {
<%- nodes.each do |node| -%>
        case <%= node.type %>:
            return "<%= node.type %>";
<%- end -%>
    }
    return "";
}

static void
pm_dump_json_constant(pm_buffer_t *buffer, const pm_parser_t *parser, pm_constant_id_t constant_id) {
    const pm_constant_t *constant = pm_constant_pool_id_to_constant(&parser->constant_pool, constant_id);
    pm_buffer_append_byte(buffer, '"');
    pm_buffer_append_source(buffer, constant->start, constant->length, PM_BUFFER_ESCAPING_JSON);
    pm_buffer_append_byte(buffer, '"');
}

static void
pm_dump_json_location(pm_buffer_t *buffer, const pm_parser_t *parser, const pm_location_t *location) {
    uint32_t start = (uint32_t) (location->start - parser->start);
    uint32_t end = (uint32_t) (location->end - parser->start);
    pm_buffer_append_format(buffer, "{\"start\":%" PRIu32 ",\"end\":%" PRIu32 "}", start, end);
}

/**
 * Dump JSON to the given buffer.
 */
PRISM_EXPORTED_FUNCTION void
pm_dump_json(pm_buffer_t *buffer, const pm_parser_t *parser, const pm_node_t *node) {
    switch (PM_NODE_TYPE(node)) {
        <%- nodes.each do |node| -%>
        case <%= node.type %>: {
            pm_buffer_append_string(buffer, "{\"type\":\"<%= node.name %>\",\"location\":", <%= node.name.bytesize + 22 %>);

            const pm_<%= node.human %>_t *cast = (const pm_<%= node.human %>_t *) node;
            pm_dump_json_location(buffer, parser, &cast->base.location);
            <%- node.fields.each_with_index do |field, index| -%>

            // Dump the <%= field.name %> field
            pm_buffer_append_byte(buffer, ',');
            pm_buffer_append_string(buffer, "\"<%= field.name %>\":", <%= field.name.bytesize + 3 %>);
            <%- case field -%>
            <%- when Prism::NodeField -%>
            pm_dump_json(buffer, parser, (const pm_node_t *) cast-><%= field.name %>);
            <%- when Prism::OptionalNodeField -%>
            if (cast-><%= field.name %> != NULL) {
                pm_dump_json(buffer, parser, (const pm_node_t *) cast-><%= field.name %>);
            } else {
                pm_buffer_append_string(buffer, "null", 4);
            }
            <%- when Prism::NodeListField -%>
            const pm_node_list_t *<%= field.name %> = &cast-><%= field.name %>;
            pm_buffer_append_byte(buffer, '[');

            for (size_t index = 0; index < <%= field.name %>->size; index++) {
                if (index != 0) pm_buffer_append_byte(buffer, ',');
                pm_dump_json(buffer, parser, <%= field.name %>->nodes[index]);
            }
            pm_buffer_append_byte(buffer, ']');
            <%- when Prism::StringField -%>
            const pm_string_t *<%= field.name %> = &cast-><%= field.name %>;
            pm_buffer_append_byte(buffer, '"');
            pm_buffer_append_source(buffer, pm_string_source(<%= field.name %>), pm_string_length(<%= field.name %>), PM_BUFFER_ESCAPING_JSON);
            pm_buffer_append_byte(buffer, '"');
            <%- when Prism::ConstantField -%>
            pm_dump_json_constant(buffer, parser, cast-><%= field.name %>);
            <%- when Prism::OptionalConstantField -%>
            if (cast-><%= field.name %> != PM_CONSTANT_ID_UNSET) {
                pm_dump_json_constant(buffer, parser, cast-><%= field.name %>);
            } else {
                pm_buffer_append_string(buffer, "null", 4);
            }
            <%- when Prism::ConstantListField -%>
            const pm_constant_id_list_t *<%= field.name %> = &cast-><%= field.name %>;
            pm_buffer_append_byte(buffer, '[');

            for (size_t index = 0; index < <%= field.name %>->size; index++) {
                if (index != 0) pm_buffer_append_byte(buffer, ',');
                pm_dump_json_constant(buffer, parser, <%= field.name %>->ids[index]);
            }
            pm_buffer_append_byte(buffer, ']');
            <%- when Prism::LocationField -%>
            pm_dump_json_location(buffer, parser, &cast-><%= field.name %>);
            <%- when Prism::OptionalLocationField -%>
            if (cast-><%= field.name %>.start != NULL) {
                pm_dump_json_location(buffer, parser, &cast-><%= field.name %>);
            } else {
                pm_buffer_append_string(buffer, "null", 4);
            }
            <%- when Prism::UInt8Field -%>
            pm_buffer_append_format(buffer, "%" PRIu8, cast-><%= field.name %>);
            <%- when Prism::UInt32Field -%>
            pm_buffer_append_format(buffer, "%" PRIu32, cast-><%= field.name %>);
            <%- when Prism::FlagsField -%>
            size_t flags = 0;
            pm_buffer_append_byte(buffer, '[');
            <%- found = flags.find { |flag| flag.name == field.kind }.tap { |found| raise "Expected to find #{field.kind}" unless found } -%>
            <%- found.values.each_with_index do |value, index| -%>
            if (PM_NODE_FLAG_P(cast, PM_<%= found.human.upcase %>_<%= value.name %>)) {
                if (flags != 0) pm_buffer_append_byte(buffer, ',');
                pm_buffer_append_string(buffer, "\"<%= value.name %>\"", <%= value.name.bytesize + 2 %>);
                flags++;
            }
            <%- end -%>
            pm_buffer_append_byte(buffer, ']');
            <%- else -%>
            <%- raise %>
            <%- end -%>
            <%- end -%>

            pm_buffer_append_byte(buffer, '}');
            break;
        }
        <%- end -%>
        case PM_SCOPE_NODE:
            break;
    }
}
