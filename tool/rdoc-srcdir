#!ruby -W0

rdoc_path = Dir.glob("#{File.dirname(__dir__)}/.bundle/gems/rdoc-*").first
$LOAD_PATH.unshift("#{rdoc_path}/lib")
require 'rdoc/rdoc'

# Make only the output directory relative to the invoked directory.
invoked = Dir.pwd

# Load options and parse files from srcdir.
Dir.chdir(File.dirname(__dir__))

options = RDoc::Options.load_options
options.title = options.title.sub(/Ruby \K.*version/) {
  File.read("include/ruby/version.h")
    .scan(/^ *# *define +RUBY_API_VERSION_(MAJOR|MINOR) +(\d+)/)
    .sort # "MAJOR" < "MINOR", fortunately
    .to_h.values.join(".")
}

if ARGV.first == "--bundled-gems"
  _, gems_list, gems_dir = ARGV.shift(3)
  gems_dir or abort "usage: #$0 --bundled-gems gems_list gems_dir rdoc-arguments..."
  bundles = File.read(gems_list) rescue
    abort("#$0: cannot read bundled gems list file: #{gems_list}")
  Dir.exist?(gems_dir) or
    abort "#$0: extracted gems directory not found: #{gems_dir}"
  bundles.scan(/^([^#\s]+)\s+([^#\s]+)/) do |g, v|
    d = "#{gems_dir}/#{g}-#{v}/"
    ARGV << d if Dir.exist?(d)
  end
end

options.parse ARGV

options.singleton_class.define_method(:finish) do
  super()
  @op_dir = File.expand_path(@op_dir, invoked)
end

# Do not hide errors when generating documents of Ruby itself.
RDoc::RDoc.new.document options
