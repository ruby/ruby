%# -*- mode:c; style:ruby; coding: utf-8; indent-tabs-mode: nil -*-
%# Copyright (c) 2017 Urabe, Shyouhei.  All rights reserved.
%#
%# This file is a part of  the programming language Ruby.  Permission is hereby
%# granted, to either  redistribute and/or modify this file,  provided that the
%# conditions mentioned  in the  file COPYING  are met.   Consult the  file for
%# details.
%;

/* insn <%= insn.pretty_name %> */
INSN_ENTRY(<%= insn.name %>)
{
%#  NAME_OF_CURRENT_INSN is used in vm_exec.h
#   define NAME_OF_CURRENT_INSN <%= insn.name %>
#   define INSN_ATTR(x) <%= insn.call_attribute(' ## x ## ') %>
    bool leaf;
    MAYBE_UNUSED(VALUE *) canary;
% unless insn.declarations.empty?
    <%= insn.declarations.join(";\n    ") %>;

% end
    START_OF_ORIGINAL_INSN(<%= insn.name %>);
% insn.preamble.each do |konst|
<%= render_c_expr konst -%>
% end
% insn.opes.each_with_index do |ope, i|
    <%= ope[:name] %> = (<%= ope[:type] %>)GET_OPERAND(<%= i + 1 %>);
% end
%
% insn.pops.reverse_each.with_index.reverse_each do |pop, i|
    <%= pop[:name] %> = <%= insn.cast_from_VALUE pop, "TOPN(#{i})"%>;
% end
    DEBUG_ENTER_INSN(INSN_ATTR(name));
    if (! (leaf = INSN_ATTR(leaf))) ADD_PC(INSN_ATTR(width));
% if insn.handles_sp?
    POPN(INSN_ATTR(popn));
% end
<%= insn.handle_canary "SETUP_CANARY()" -%>
    COLLECT_USAGE_INSN(INSN_ATTR(bin));
% insn.opes.each_with_index do |ope, i|
    COLLECT_USAGE_OPERAND(INSN_ATTR(bin), <%= i %>, <%= ope[:name] %>);
% end
<%= render_c_expr insn.expr -%>
    CHECK_VM_STACK_OVERFLOW_FOR_INSN(VM_REG_CFP, INSN_ATTR(retn));
<%= insn.handle_canary "CHECK_CANARY()" -%>
% if insn.handles_sp?
%   insn.rets.reverse_each do |ret|
    PUSH(<%= insn.cast_to_VALUE ret %>);
%   end
% else
    INC_SP(INSN_ATTR(sp_inc));
%   insn.rets.reverse_each.with_index do |ret, i|
    TOPN(<%= i %>) = <%= insn.cast_to_VALUE ret %>;
%   end
% end
    if (leaf) ADD_PC(INSN_ATTR(width));
    END_INSN(<%= insn.name %>);
#   undef INSN_ATTR
#   undef NAME_OF_CURRENT_INSN
}
